{"version":3,"sources":["Types/Messages.js","Types/Common.js","redux/actions/page-actions.js","redux/actions/action-types.js","Core/Helper.js","Services/Cache.js","components/Utils/iconHelper.js","components/Navigation/app-bar.js","components/ToolBox/action.js","components/Navigation/action-bar.js","Models/User.js","Services/HttpClient.js","Core/Response.js","Services/UserService.js","redux/actions/login-actions.js","components/Begin/password-change.js","redux/actions/city-county-actions.js","components/Begin/google/google-login.js","components/Begin/Login.js","components/Layout.js","components/ToolBox/DataTable.js","components/ToolBox/dialog-form.js","Services/CoreService.js","components/ToolBox/combo-box.js","Services/HotelService.js","Models/hotel/HotelModel.js","components/hotel-add.js","components/Home.js","components/Distributor.js","App.js","Models/Parameter.js","redux/reducers/initial-state.js","redux/reducers/index.js","redux/reducers/login-reducer.js","redux/reducers/city-county-reducer.js","redux/reducers/county-reducer.js","redux/reducers/parameter-reducer.js","redux/reducers/register-reducer.js","redux/reducers/change-login-status-reducer.js","redux/reducers/message-reducer.js","redux/reducers/change-selected-city-reducer.js","redux/reducers/actionReducers/action-list-reducer.js","redux/reducers/actionReducers/action-execute-reducer.js","redux/reducers/actionReducers/change-backdrop-status-reducer.js","redux/reducers/change-login-new-password-reducer.js","index.js","redux/reducers/configure-store.js"],"names":["Messages","PlsLogIn","EMailInputFormText","EMailInvalid","EMailValid","MenuNames","Main","admin","Action","addApartmernOrSite","Other","managment","Titles","defineBlock","ActionNames","refresh","createDistributor","createHotel","save","enter","add","getInfo","edit","close","examine","read","LabelNames","name","surname","email","address","zipcode","city","county","recordType","password","floorCount","blockCount","blockName","Warnings","selectRecordType","CouldNotDoProc","Information","Success","Errors","InvalidInformation","AccurredAnError","InvalidMailOrUser","require","CommonTypes","controllerName","actionName","this","URLaddress","concat","trim","KafkaHost","KafkaTopic","RabbitMQ","RabbitMQTopicName","MessageTypes","success","error","info","Iconkeys","inbox","personadd","viewlist","howtovote","home","addChart","listChart","paydue","updown","profile","apartment","CacheKeys","CityList","CountyList","ActionKeys","Refresh","CreateDistributor","CreateHotel","Save","GetList","Clean","Close","Edit","Examine","Read","AddAgreement","GiveOffer","Divit","ActionTypes","delete","list","giveoffer","Resources","distributor","resourceCode","actionKeys","defineSiteApartment","defineMember","memberList","userProfile","userInbox","VoteDefine","VotingAndResult","ExpenseEntry","ExpenseList","TenderDefining","TenderListing","DuesPayment","DuesListing","ResponseStatusCode","successful","created","accepted","nonAuthoritative","noContent","resetContent","partialContent","clientError","badRequest","unAuthorized","paymentRequired","forbidden","notFound","methodNotAllowed","serverError","InternalServerError","notImplemented","badGateway","serviceUnavailable","gatewayTimeout","httpVersionNotSupported","changeActiveResourceCode","push","apply","dispatch","actionKeyList","type","payload","GetActionListSuccess","executeCommand","onExecute","executeSuccess","changeBackDropStatus","status","changeBackDropSuccess","StringBuilder","IsNullOrEmpty","text","length","GetIntValue","value","parseInt","e","ShowStatusError","message","Alertify","ShowStatusSuccess","LRU","Cache","paramType","key","lru","has","set","get","max","maxAge","getParameter","GetIcon","iconKey","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","spacing","mixins","toolbar","justifyContent","grow","flexGrow","menuButton","marginRight","title","breakpoints","up","content","contentShift","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","searchIcon","height","pointerEvents","inputRoot","color","inputInput","paddingLeft","sectionDesktop","sectionMobile","connect","state","userContract","loginReducer","actions","changeBackdropStatus","bindActionCreators","pageActions","props","classes","useState","anchorEl","mobileMoreAnchorEl","tmpusr","JSON","parse","localStorage","getItem","console","log","cacheResources","useTheme","openMenu","setOpenMenu","Boolean","Menu","MenuItem","Link","IconButton","Badge","className","CssBaseline","AppBar","clsx","Toolbar","edge","aria-label","onClick","Typography","variant","noWrap","Drawer","anchor","open","paper","direction","Divider","Accordion","AccordionDetails","List","ListItem","button","component","to","ListItemIcon","ListItemText","primary","map","val","ind","AccordionSummary","expandIcon","aria-controls","id","style","fontSize","fontWeight","parentName","resources","sval","sind","path","children","ActionKey","Button","size","startIcon","Icon","onExecuteCommand","getActionLabel","propType","ResourceCode","PropTypes","string","isRequired","actionExecuteReducer","ActionBar","getIcon","generateActions","actionListInfo","index","alert","Component","actionListReducer","User","HttpClientServiceInstance","setTokenOnLogin","token","axiosInstance","defaults","headers","Authorization","clearTokenOnLogout","removeItem","axios","baseURL","url","then","resp","Promise","resolve","catch","undefined","response","reject","window","location","replace","data","post","Response","addResult","severity","errorCode","results","Result","getResultsStringFormat","result","ErrorMessage","appendLine","toString","errorMessage","code","ErrorCode","Severity","a","contract","GetUrlForAPI","setItem","res","accessToken","shouldNewPassword","expriation","expiration","user","addCoreResults","ForgotPassword","ro","err","SetNewPassword","LoginSuccess","ChangeLoginStatusSuccess","isSuccess","isNewPassword","ChangeLoginStatus","jwtObject","Login","LoginUser","Date","PasswordChange","onSubmitForm","newPassword","newPassword2","changeStatus","changeLoginStatus","Grid","container","item","xs","TextField","label","required","onChange","setState","target","loginJwtObject","changeLoginStatusReducer","loginActions","getCityList","getCountyListSuccess","stringify","countylist","GoogleLoginComponent","onSuccess","profileObj","onFailure","isDisable","justifyItems","clientId","buttonText","cookiePolicy","marginTop","isSignedIn","disabled","loginUserContract","onForgotPassword","dataContract","Email","isForgotPassword","validate","emailState","Password","test","alignContent","Form","Col","FormGroup","Label","Input","valid","invalid","autoComplete","placeholder","datac","onBlur","validateEmail","FormFeedback","for","FormControlLabel","control","Checkbox","checked","loginUser","cityActions","Container","maxWidth","Card","CardActions","CardContent","loginControl","DataTable","options","filterType","onRowSelectionChange","onSelectedItemChange","selectableRows","selectableRowsOnClick","columns","DialogTitle","withStyles","margin","closeButton","right","top","grey","onClose","other","disableTypography","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DialogForm","React","setOpen","handleClose","Dialog","fullWidth","aria-labelledby","dividers","autoFocus","GetCountryList","returnData","countryList","constantValue","constantCode","ComboBox","defaultValue","dataList","itemSource","selectedValue","tempList","dt","find","v","prevProps","prevState","snapshot","splice","Autocomplete","getOptionLabel","option","renderInput","params","reason","GetHotels","returnObject","SaveHotel","model","HotelModel","allowGeneralCard","contactType","HotelAdd","validateAndSetHotel","IsNullOrEmptyAll","hotel","hotelName","hotelAdminName","hotelAdminMail","mobileNumber","validSectors","hotelCode","countryCode","mobileCountryCode","setHotel","renderCount","isLoading","defaultCountry","validation","isValid","helperText","CardHeader","avatar","Avatar","subheader","md","dialogGridMdSize","validObj","defaultProps","array","func","Home","filter","sort","onLoad","getCountries","all","getList","dialogContent","isOpenDialogForm","onCreate","hotelContract","hotelModel","handleCloseDialog","handleOpenDialog","validateCreateModel","isAddedHotelValid","hotelList","selectedHotel","active","spinner","elevation","currentRowIndex","allRowsIndexes","rowsSelectedIndex","selectedData","count","displayName","Distributor","App","exact","Parameter","registerUser","isRegistered","userId","userName","firstName","lastName","cityList","cityId","selectedCityId","countyList","countyId","parameterList","initialParameter","ParamCode","ParamType","messageObject","messageType","executedAction","backDropStatus","rootReducer","combineReducers","initialState","action","cityReducer","countyReducer","parameterReducer","registerReducer","showMessageReducer","changeSelectedCityReducer","backdropStatusReducer","changeLoginToNewPasswordReducer","rootElement","document","getElementById","store","createStore","applyMiddleware","thunk","ReactDOM","render","template","AlertTemplate","timeout","offset"],"mappings":"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","file":"static/js/main.124e17ff.chunk.js","sourcesContent":["export default class Messages {\n  static PlsLogIn = \"Merhaba. Lütfen giriş yapınız...\";\n  static EMailInputFormText = \"Geçerli ve aktif bir mail adresi giriniz.\";\n  static EMailInvalid = \"Geçersiz mail adresi.\";\n  static EMailValid = \"\";\n\n  static MenuNames = {\n    Main: {\n      admin: \"Admin\",\n    },\n    Action: {\n      addApartmernOrSite: \"Site/Aparman ekle\",\n    },\n    Other: {\n      managment: \"Yönetim\",\n    },\n  };\n\n  static Titles = {\n    defineBlock: \"Blok ekleme\",\n  };\n\n  static ActionNames = {\n    /**refresh */\n    refresh:\"Refresh\",\n    /** distributor kaydet */\n    createDistributor: \"Create distributor\",\n    /** otel ekle */\n    createHotel: \"Create Hotel\",\n    /**kaydet */\n    save: \"Kaydet\",\n    /**giriş yap */\n    enter: \"Giriş Yap\",\n    /**ekle */\n    add: \"Ekle\",\n    /** bilgi getir, listele*/\n    getInfo:\"Bilgi Getir\",\n    /* güncelle */\n    edit:\"Güncelle\",\n    /* kapat */\n    close:\"Kapat\",\n    /* İncele */\n    examine:\"İncele\",\n    /* Oku */\n    read:\"Oku\"\n  };\n\n  static LabelNames = {\n    name: \"Adınız\",\n    surname: \"Soyadınız\",\n    email: \"Mail Adresiniz\",\n    address: \"Adres\",\n    zipcode: \"Posta Kodu\",\n    city: \"İl\",\n    county: \"İlçe\",\n    recordType: \"Kayıt Türü\",\n    password: \"Parola\",\n    floorCount: \"Kat Sayısı\",\n    blockCount: \"Blok Sayısı\",\n    blockName: \"Blok Adı\",\n  };\n\n  static Warnings = {\n    selectRecordType: \"Kayıt Türünü Seçiniz..\",\n    /**işlem başarısız oldu. */\n    CouldNotDoProc: \"İşlem başarısız.\",\n  };\n\n  static Information = {\n    /**\n     * işlem başarılı\n     */\n    Success: \"İşlem Başarılı.\",\n  };\n\n  static Errors = {\n    InvalidInformation: \"Eksik veya hatalı bilgi girdiniz.\",\n    /**hata oluştu mesajı */\n    AccurredAnError: \"İşlem yapılırken hata meydana geldi.\",\n    /**\n     * geçersiz mail veya parola\n     */\n    InvalidMailOrUser: \"Geçersiz mail adresi veya parola..\",\n  };\n}\n","import Messages from \"./Messages\";\nconst dateFormat = require(\"dateformat\");\n\n/**\n * common types for general components\n */\nexport class CommonTypes {\n  static URLaddress = \"http://207.154.218.199:5010\"; //23163 - api, 5001 - gateway\n  static KafkaHost = \"http://167.172.180.44:9092\";\n  static KafkaTopic = \"apmantest\";\n  static RabbitMQ = \"http://167.172.180.44:5672\";\n  static RabbitMQTopicName = \"apman-client\";\n\n  /**\n   *\n   * @param {string} controllerName\n   * @param {string} actionName\n   */\n  static GetUrlForAPI(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/api/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n  static GetUrlForAccount(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/accounting/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n  static GetUrlForPurchasing(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/purchasing/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n\n  static MessageTypes = {\n    success: \"success\",\n    error: \"error\",\n    info: \"info\",\n  };\n\n  /**\n   * the icon keys\n   * @type {{viewlist: string, personadd: string, inbox: string, howtovote: string}}\n   */\n  static Iconkeys = {\n    inbox: \"inbox\",\n    personadd: \"personadd\",\n    viewlist: \"viewlist\",\n    howtovote: \"howtovote\",\n    home: \"home\",\n    addChart: \"addchart\",\n    listChart: \"listchart\",\n    paydue: \"paydue\",\n    updown: \"updown\",\n    profile: \"profile\",\n    apartment: \"apartment\",\n    refresh:\"refresh\"\n  };\n\n  /**\n   * cache keyleri tutulur.\n   */\n  static CacheKeys = {\n    CityList: \"CITYLIST\",\n    CountyList: \"COUNTYLIST\",\n  };\n\n  /**\n   * aksiyon isimleri\n   */\n  static ActionKeys = {\n    /**refresh */\n    Refresh:\"REFRESH\",\n    /** create distributor */\n    CreateDistributor:\"CREATEDIST\",\n    /** create a hotel */\n    CreateHotel:\"CREATEHOTEL\",\n    /**\n     * kaydet\n     */\n    Save: \"SAVE\",\n    /**\n     * bilgi getir (listele)\n     * GETLIST\n     */\n    GetList: \"GETLIST\",\n    /**\n     * Temizle\n     */\n    Clean: \"CLEAN\",\n    /**\n     * kapat\n     */\n    Close: \"CLOSE\",\n    /**\n     * düzenle / güncelle\n     */\n    Edit: \"EDIT\",\n    /**\n     * incele / ayrıntı\n     */\n    Examine: \"EXAMINE\",\n    /* Oku */\n    Read: \"READ\",\n    /* sözleşme ekle */\n    AddAgreement: \"ADDAGR\",\n    /*teklif ver */\n    GiveOffer: \"GVOFFR\",\n    /**döküman ekle */\n    Divit: \"DIVIT\",\n  };\n\n  /**\n   * aksiyon tiplerini tutar.\n   */\n  static ActionTypes = {\n    save: \"save\",\n    add: \"add\",\n    delete: \"delete\",\n    info: \"info\",\n    close: \"close\",\n    list: \"list\",\n    read: \"read\",\n    examine: \"examine\",\n    giveoffer: \"giveoffer\",\n  };\n\n  /**\n   * kaynak tanımları\n   */\n  static Resources = {\n    /**\n     * distributor\n     */\n    distributor:{\n      resourceCode:\"DISTR\",\n      actionKeys:[\n        CommonTypes.ActionKeys.CreateDistributor,\n        CommonTypes.ActionKeys.Refresh\n      ]\n    },\n    /**\n     * home\n     */\n    home: {\n      resourceCode: \"HOME\",\n      actionKeys: [\n        CommonTypes.ActionKeys.CreateHotel,\n        CommonTypes.ActionKeys.Refresh\n      ],\n    },\n    /**\n     * site apartman ekle\n     */\n    defineSiteApartment: {\n      /**\n       * DEFAPT\n       */\n      resourceCode: \"DEFAPT\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * üye tanımlama\n     */\n    defineMember: {\n      resourceCode: \"DEFMEM\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * üye listeleme\n     */\n    memberList: {\n      resourceCode: \"DEFLST\",\n      actionKeys: [CommonTypes.ActionKeys.GetList, CommonTypes.ActionKeys.Edit],\n    },\n    /**\n     * kullanıcı profili\n     */\n    userProfile: {\n      resourceCode: \"USRPRF\",\n      actionKeys: [CommonTypes.ActionKeys.Close],\n    },\n    /**\n     * gelen kutusu\n     */\n    userInbox: {\n      resourceCode: \"USRINB\",\n      actionKeys: [CommonTypes.ActionKeys.GetList, CommonTypes.ActionKeys.Read],\n    },\n    /**\n     * Anket tanımlama\n     */\n    VoteDefine: {\n      resourceCode: \"VTEDEF\",\n      actionKeys: [CommonTypes.ActionKeys.Save, CommonTypes.ActionKeys.Clean],\n    },\n    /**\n     * oy kullanma ve sonuç görme\n     */\n    VotingAndResult: {\n      resourceCode: \"VTNRES\",\n      actionKeys: [CommonTypes.ActionKeys.GetList],\n    },\n    /**\n     * masraf giriş\n     */\n    ExpenseEntry: {\n      resourceCode: \"EXPENT\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * masraf giriş\n     */\n    ExpenseList: {\n      resourceCode: \"EXPLST\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n      ],\n    },\n    /**\n     * ihale tanımlama\n     *\n     */\n    TenderDefining: {\n      resourceCode: \"TNRDEF\",\n      actionKeys: [CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * ihale listeleme\n     */\n    TenderListing: {\n      resourceCode: \"TNRLST\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n        CommonTypes.ActionKeys.GiveOffer,\n      ],\n    },\n    /**\n     * aidat ödeme\n     */\n    DuesPayment: {\n      resourceCode: \"DUESPY\",\n      actionKeys: [CommonTypes.ActionKeys.Divit, CommonTypes.ActionKeys.Save],\n    },\n    /**\n     * aidat listeleme\n     */\n    DuesListing: {\n      resourceCode: \"DUESLS\",\n      actionKeys: [\n        CommonTypes.ActionKeys.GetList,\n        CommonTypes.ActionKeys.Examine,\n      ],\n    },\n  };\n\n  /**\n   * http response status code\n   */\n  static ResponseStatusCode = {\n    successful: {\n      success: 200,\n      created: 201,\n      accepted: 202,\n      nonAuthoritative: 203,\n      noContent: 204,\n      resetContent: 205,\n      partialContent: 206,\n    },\n    clientError: {\n      badRequest: 400,\n      unAuthorized: 401,\n      paymentRequired: 402,\n      forbidden: 403,\n      notFound: 404,\n      methodNotAllowed: 405,\n    },\n    serverError: {\n      InternalServerError: 500,\n      notImplemented: 501,\n      badGateway: 502,\n      serviceUnavailable: 503,\n      gatewayTimeout: 504,\n      httpVersionNotSupported: 505,\n    },\n  };\n}\n\n/**\n * aksiyon ismini verir\n * @param key\n * @returns {string}\n */\nexport function getActionLabel(key) {\n  switch (key) {\n    case CommonTypes.ActionKeys.CreateDistributor:\n      return Messages.ActionNames.createDistributor;\n      case CommonTypes.ActionKeys.CreateHotel:\n        return Messages.ActionNames.createHotel;\n    case CommonTypes.ActionKeys.Save:\n      return Messages.ActionNames.save;\n    case CommonTypes.ActionKeys.GetList:\n      return Messages.ActionNames.getInfo;\n    case CommonTypes.ActionKeys.Edit:\n      return Messages.ActionNames.edit;\n    case CommonTypes.ActionKeys.Close:\n      return Messages.ActionNames.close;\n    case CommonTypes.ActionKeys.Examine:\n      return Messages.ActionNames.examine;\n    case CommonTypes.ActionKeys.Read:\n      return Messages.ActionNames.read;\n    case CommonTypes.ActionKeys.AddAgreement:\n      return \"Sözleşme Ekle\";\n    case CommonTypes.ActionKeys.GiveOffer:\n      return \"Teklif Ver\";\n    case CommonTypes.ActionKeys.Divit:\n      return \"Divit\";\n    case CommonTypes.ActionKeys.Refresh:\n      return Messages.ActionNames.refresh;  \n\n    default:\n      return \"action\";\n  }\n}\n\n/**\n * yyyy-mm-dd tarih verir.\n * @returns {*}\n */\nexport function getDateIsoDate() {\n  return dateFormat(new Date(), \"isoDate\");\n}\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\n\n//#region get actions\n\n/**\n * aksiyon listesi getirilir.\n * @param {string} resourceCode ekran kodu\n */\nexport function changeActiveResourceCode(resourceCode) {\n  let actionKeys = [];\n  // LogMessage(\"test message\");\n  switch (resourceCode) {\n    // home\n    case CommonTypes.Resources.home.resourceCode:\n      actionKeys.push.apply(actionKeys, CommonTypes.Resources.home.actionKeys);\n      break;\n    case CommonTypes.Resources.distributor.resourceCode:\n      actionKeys.push.apply(actionKeys, CommonTypes.Resources.distributor.actionKeys);\n      break;\n    //apartman tanımlama\n    case CommonTypes.Resources.defineSiteApartment.resourceCode:\n      actionKeys.push.apply(actionKeys, [CommonTypes.ActionKeys.Save]);\n      break;\n    //üye ekle\n    case CommonTypes.Resources.defineMember.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.defineMember.actionKeys\n      );\n      break;\n    //üye listele\n    case CommonTypes.Resources.memberList.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.memberList.actionKeys\n      );\n      break;\n    // gelen kutusu\n    case CommonTypes.Resources.userInbox.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.userInbox.actionKeys\n      );\n      break;\n    // anket tanımlama\n    case CommonTypes.Resources.VoteDefine.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.VoteDefine.actionKeys\n      );\n      break;\n    // anket işlemler ve sonuçlar\n    case CommonTypes.Resources.VotingAndResult.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.VotingAndResult.actionKeys\n      );\n      break;\n    // masraf giriş\n    case CommonTypes.Resources.ExpenseEntry.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.ExpenseEntry.actionKeys\n      );\n      break;\n    // masraf listele\n    case CommonTypes.Resources.ExpenseList.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.ExpenseList.actionKeys\n      );\n      break;\n    // ihale kaydı\n    case CommonTypes.Resources.TenderDefining.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.TenderDefining.actionKeys\n      );\n      break;\n      // ihale listeleme\n    case CommonTypes.Resources.TenderListing.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.TenderListing.actionKeys\n      );\n      break;\n      // aidat ödeme\n    case CommonTypes.Resources.DuesPayment.resourceCode:\n      actionKeys.push.apply(\n        actionKeys,\n        CommonTypes.Resources.DuesPayment.actionKeys\n      );\n      break;\n      // aidat listeleme\n    case CommonTypes.Resources.DuesListing.resourceCode:\n      actionKeys.push.apply(\n          actionKeys,\n          CommonTypes.Resources.DuesListing.actionKeys\n      );\n      break;\n    default:\n      break;\n  }\n\n  return function (dispatch) {\n    dispatch(GetActionListSuccess(actionKeys, resourceCode));\n  };\n}\n\nexport function GetActionListSuccess(actionKeyList, resourceCode) {\n  return {\n    type: actionTypes.CHANGE_ACTION_LIST,\n    payload: { actionKeyList, resourceCode },\n  };\n}\n\n//#endregion\n\n//#region execute action\n\n/**\n * on execute action\n * @param {func} onExecute (key)\n */\nexport function executeCommand(onExecute) {\n  return function (dispatch) {\n    dispatch(executeSuccess(onExecute));\n  };\n}\n\nexport function executeSuccess(onExecute) {\n  return {\n    type: actionTypes.EXECUTE_ACTION,\n    payload: {\n      onExecute,\n    },\n  };\n}\n\n//#endregion\n\n//#region backdrop\n\nexport function changeBackDropStatus(status) {\n  return function (dispatch) {\n    return dispatch(changeBackDropSuccess(status));\n  };\n}\n\nexport function changeBackDropSuccess(status) {\n  return {\n    type: actionTypes.BACKDROP_STATUS,\n    payload: status,\n  };\n}\n//#endregion\n","export const LOGIN = \"LOGIN\";\nexport const REGISTER = \"REGISTER\";\nexport const GETCITYLIST = \"GETCITYLIST\";\nexport const GETCOUNTYLIST = \"GETCOUNTYLIST\";\nexport const GETPARAMETER = \"GETPARAMETER\";\nexport const CHANGE_LOGIN_STATUS = \"CHANGE_LOGIN_STATUS\";\nexport const SHOW_STATUS_MESSAGE = \"SHOW_STATUS_MESSAGE\";\nexport const CHANGE_SELECTED_CITY_ID = \"CHANGE_SELECTED_CITY_ID\";\nexport const CHANGE_ACTION_LIST = \"CHANGE_ACTION_LIST\";\nexport const EXECUTE_ACTION = \"EXECUTE_ACTION\";\nexport const BACKDROP_STATUS = \"BACKDROP_STATUS\";\nexport const CHANGE_LOGIN_NEW_PASSWORD = \"CHANGE_LOGIN_NEW_PASSWORD\";\n","import { getDateIsoDate } from \"../Types/Common\";\nimport Alertify from \"alertifyjs\";\n\nexport const StringBuilder = require(\"string-builder\");\n\n/**\n * metin değerlerinin doluluğunu kontrol eder.\n * undefined veya boş ise true döner.\n * @param {string} text kontrol edilecek metin\n */\nexport function IsNullOrEmpty(text) {\n  return !(text && text.length > 0);\n}\n/**\n * array içerisindeki elemanların null kontrolü yapılır.\n * @param {Array} params\n */\nexport function IsNullOrEmptyAll(params) {\n  if (params && params.length > 0) {\n    for (const item of params) {\n      if (IsNullOrEmpty(item)) return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * obj eğer geçerli bir obje ise true döner.\n * @param obj\n * @returns {boolean}\n * @constructor\n */\nexport function IsValidObject(obj) {\n  return !!(obj && typeof obj === \"object\");\n}\n\n/**\n * girilen değer geçersiz ise -1 döner.\n * geçerli ise değeri int oalarak döner\n * @param value\n * @returns {number}\n * @constructor\n */\nexport function GetIntValue(value) {\n  if (value && typeof value === \"number\") {\n    return parseInt(value);\n  }\n  if (value && typeof value === \"string\") {\n    let val = -1;\n    try {\n      val = parseInt(value);\n      return val;\n    } catch (e) {\n      return -1;\n    }\n  } else return -1;\n}\n\n/**\n * tarih kontrolü yapar.\n * eğer bugünden küçük veya geçersiz ise false döner.\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function DateControlOlderToday(value) {\n  // eslint-disable-next-line valid-typeof\n  if (value && typeof value === \"date\") {\n    let date = getDateIsoDate();\n    return value >= date;\n  }\n  return false;\n}\n\n/**\n * eğer item1 < item2 ise ve tarihler geçerli ise true döner\n * @param item1\n * @param item2\n * @returns {boolean}\n * @constructor\n */\nexport function IsBiggerDate(item1, item2) {\n  // eslint-disable-next-line valid-typeof\n  if (item1 && typeof item1 === \"date\" && item2 && typeof item2 === \"date\") {\n    return item1 <= item2;\n  }\n  return false;\n}\n\n/**\n * bir ay öncesini verir\n * @param date {Date}\n * @returns {Date}\n * @constructor\n */\nexport function GetOneMonthAgo(date = new Date()){\n  \n  if(date.getMonth() === 0){\n    var year = date.getFullYear()-1;\n    date.setFullYear(year);\n    date.setMonth(11);\n  }else{\n    var month = date.getMonth()-1;\n    date.setMonth(month);\n  }\n  return date;\n}\n\n/**\n * is value -1 ? true:\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function IsInvalidIndex(value) {\n  return value === -1;\n}\n\n/**\n * returned login user\n * @returns {User}\n * @constructor\n */\nexport function GetActiveLocalUser() {\n  return JSON.parse(localStorage.getItem(\"user\" || {}));\n}\n\n/**\n * returned message\n * @param propertyName\n * @constructor\n */\nexport function GetMessage(propertyName) {\n  if (propertyName) {\n    //mesaj servisi oluşturulacak.\n  }\n}\n\n//#region status messages\n\n/**\n * status'ta hata mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusError(message) {\n  Alertify.error(message);\n}\n/**\n * status'ta bilgi mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusInfo(message) {\n  Alertify.notify(message);\n}\n/**\n * status'ta başarılı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusSuccess(message) {\n  Alertify.success(message);\n}\n/**\n * status'ta uyarı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusWarning(message) {\n  Alertify.warning(message);\n}\n//#endregion\n","const LRU = require(\"lru-cache\");\n\nexport default class Cache {\n  static lru = new LRU({ max: 100, maxAge: 1000 * 60 * 60 * 24 });\n\n  static getParameter = (paramType) => {\n    let key = \"prm_\" + paramType;\n    if (Cache.lru.has(key)) {\n      return Cache.lru.get(key);\n    } else {\n      return undefined;\n    }\n  };\n\n  static setParameter(paramType, value) {\n    let key = \"prm_\" + paramType;\n    if (!Cache.lru.has(key)) {\n      return Cache.lru.set(key, value);\n    } else {\n      return 0;\n    }\n  }\n  \n  static setItem(key,value){\n    if (!Cache.lru.has(key)){\n      return Cache.lru.set(key, value);\n    }else {\n      return 0;\n    }\n  }\n\n  /**\n   * daha önce varsa üzerine yaz\n   * @param key\n   * @param value\n   * @returns {boolean}\n   */\n  static overrideItem(key,value){\n      return Cache.lru.set(key, value);\n  }\n  \n  static getItem(key){\n    return Cache.lru.get(key);\n  }\n}\n","import InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport ViewListRoundedIcon from \"@material-ui/icons/ViewListRounded\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport HowToVoteRoundedIcon from \"@material-ui/icons/HowToVoteRounded\";\nimport HomeIcon from \"@material-ui/icons/HomeRounded\";\nimport AddBox from \"@material-ui/icons/AddBoxRounded\";\nimport ListAltRoundedIcon from \"@material-ui/icons/ListAltRounded\"; // ihale listele\n//import ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\"; //aidat ödeme\nimport ThumbsUpDownRoundedIcon from \"@material-ui/icons/ThumbsUpDownRounded\";\nimport ProfileIcon from \"@material-ui/icons/AccountBoxRounded\";\nimport ApartmentRoundedIcon from \"@material-ui/icons/ApartmentRounded\";\nimport PaymentIcon from \"@material-ui/icons/Payment\";\n\nimport { CommonTypes } from \"../../Types/Common\";\nimport React from \"react\";\n\nexport default function GetIcon(iconKey) {\n  switch (iconKey) {\n    case CommonTypes.Iconkeys.inbox:\n      return <InboxIcon />;\n    case CommonTypes.Iconkeys.viewlist:\n      return <ViewListRoundedIcon />;\n    case CommonTypes.Iconkeys.personadd:\n      return <PersonAddIcon />;\n    case CommonTypes.Iconkeys.howtovote:\n      return <HowToVoteRoundedIcon />;\n    case CommonTypes.Iconkeys.home:\n      return <HomeIcon />;\n    case CommonTypes.Iconkeys.addChart:\n      return <AddBox />;\n    case CommonTypes.Iconkeys.listChart:\n      return <ListAltRoundedIcon />;\n    case CommonTypes.Iconkeys.paydue:\n      return <PaymentIcon />;\n    case CommonTypes.Iconkeys.updown:\n      return <ThumbsUpDownRoundedIcon />;\n    case CommonTypes.Iconkeys.profile:\n      return <ProfileIcon />;\n    case CommonTypes.Iconkeys.apartment:\n      return <ApartmentRoundedIcon />;\n    default:\n      return <InboxIcon />;\n  }\n}\n","//#region imports\nimport React, { useState } from \"react\";\n//import { Route } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport { alpha, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { GetActiveLocalUser } from \"../../Core/Helper\";\nimport Cache from \"../../Services/Cache\";\nimport GetIcon from \"../Utils/iconHelper\";\nimport { CommonTypes } from \"../../Types/Common\";\n\n//#endregion\nlet drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\n/**\n * uygulama çerçevesini oluşturur.\n * @param props\n * @returns {*}\n * @constructor\n */\nfunction AppBarMenu(props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = useState(null);\n\n  //initial user\n\n  let tmpusr = GetActiveLocalUser();\n  console.log(\"app-bar kullanıcı = \", tmpusr);\n\n  let cacheResources = Cache.getItem(\"resources\");\n  console.log(\"kaynak listesi (cache) = \", cacheResources);\n\n  //drawer\n  const theme = useTheme();\n  const [openMenu, setOpenMenu] = useState(false);\n  // eslint-disable-next-line\n  const [inboxNotifCount, setInboxNotifCount] = useState(0);\n  // eslint-disable-next-line\n  const [generalNotifCount, setGeneralNotifCount] = useState(0);\n\n  const handleDrawerOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpenMenu(false);\n  };\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n  //#region handles\n\n  const handleProfileMenuOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n\n  const handleMobileMenuOpen = (event) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n\n  //#endregion\n\n  //#region renders\n\n  const menuId = \"primary-search-account-menu\";\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      <MenuItem component={Link} to=\"/user/profile\">\n        {\" \"}\n        Profil{\" \"}\n      </MenuItem>\n    </Menu>\n  );\n\n  const mobileMenuId = \"primary-search-account-menu-mobile\";\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      <MenuItem component={Link} to=\"/user/inbox\">\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem>\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Profile</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  //#endregion\n\n  //bildirim kontrolü -- loop hatasından dolayı commentlendi geri açılacak (sınavlardan sonra :) )\n  // if(props.userContract && props.userContract.token && props.userContract.token.length>1){\n  //     if(props.userContract.inboxNotificationCount > 0)\n  //         setInboxNotifCount(props.userContract.inboxNotificationCount);\n  //     if(props.userContract.generalNotificationCount > 0)\n  //         setGeneralNotifCount(props.userContract.generalNotificationCount);\n  //\n  // }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: openMenu,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={clsx(classes.menuButton, openMenu && classes.hide)}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h5\" noWrap>\n            ARTES CLOUD\n          </Typography>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={openMenu}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <Accordion>\n          <AccordionDetails>\n            <List>\n              <ListItem button component={Link} to={\"/\"}>\n                <ListItemIcon>{GetIcon(\"home\")}</ListItemIcon>\n                <ListItemText primary={\"Ana Sayfa\"} />\n              </ListItem>\n              <ListItem button component={Link} to={\"/distributor\"}>\n                <ListItemIcon>{GetIcon(CommonTypes.Iconkeys.profile)}</ListItemIcon>\n                <ListItemText primary={\"Distributors\"} />\n              </ListItem>\n            </List>\n          </AccordionDetails>\n        </Accordion>\n        {cacheResources && cacheResources.length > 0 ? (\n          cacheResources.map((val, ind) => {\n            return (\n              <Accordion key={\"accordion\" + ind}>\n                <AccordionSummary\n                  expandIcon={<ExpandMoreIcon />}\n                  aria-controls=\"panel1a-content\"\n                  id=\"panel1a-header\"\n                >\n                  <Typography style={{ fontSize: 15, fontWeight: \"bold\" }}>\n                    {val.parentName}\n                  </Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                  <List>\n                    {val.resources.map((sval, sind) => {\n                      return (\n                        <ListItem\n                          button\n                          key={sval.resourceCode}\n                          component={Link}\n                          to={sval.path}\n                        >\n                          <ListItemIcon>{GetIcon(sval.iconKey)}</ListItemIcon>\n                          <ListItemText primary={sval.name} />\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                </AccordionDetails>\n              </Accordion>\n            );\n          })\n        ) : (\n          <p />\n        )}\n      </Drawer>\n\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: openMenu,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarMenu);\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { CommonTypes, getActionLabel } from \"../../Types/Common\";\n\n/**\n * action bar için aksiyon döndürür.\n * executeCommand() aksiyon tetikler.\n * @param {props} props (key,icon,text)\n */\nconst Action = (props) => {\n  let key = props.ActionKey;\n\n  console.log(\"key: \", key);\n  return (\n    <div style={{ display: \"inline-block\", marginLeft: \"15px\" }}>\n      {key ? (\n        <Button\n          variant=\"contained\"\n          color={key === CommonTypes.ActionKeys.Close ? \"secondary\" : \"primary\"}\n          size=\"small\"\n          startIcon={props.Icon ? props.Icon : <InfoIcon />}\n          onClick={(e) => {\n            if (props.onExecuteCommand && props.onExecuteCommand.onExecute)\n              props.onExecuteCommand.onExecute(key);\n          }}\n        >\n          {getActionLabel(key)}\n        </Button>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nAction.propType = {\n  ResourceCode: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  onExecuteCommand: state.actionExecuteReducer,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: {\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Action);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Action from \"../ToolBox/action\";\nimport { CommonTypes } from \"../../Types/Common\";\n\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport CreateIcon from \"@material-ui/icons/Create\"; //düzenle\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\"; //kapat\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\"; // temizle\nimport ImportContactsRoundedIcon from \"@material-ui/icons/ImportContactsRounded\"; // oku\nimport FindInPageOutlinedIcon from \"@material-ui/icons/FindInPageOutlined\"; // incele\nimport PostAddRoundedIcon from \"@material-ui/icons/PostAddRounded\"; // sözleşme ekle\nimport AttachFileRoundedIcon from \"@material-ui/icons/AttachFileRounded\"; // döküman\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'; // yenile\n\nclass ActionBar extends Component {\n  getIcon = (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.CreateDistributor:\n        return <SaveIcon/>\n        case CommonTypes.ActionKeys.CreateHotel:\n        return <SaveIcon/>\n      case CommonTypes.ActionKeys.Save:\n        return <SaveIcon />;\n      case CommonTypes.ActionKeys.GetList:\n        return <ListIcon />;\n      case CommonTypes.ActionKeys.Clean:\n        return <InsertDriveFileIcon />;\n      case CommonTypes.ActionKeys.Edit:\n        return <CreateIcon />;\n      case CommonTypes.ActionKeys.Close:\n        return <PowerSettingsNewIcon />;\n      case CommonTypes.ActionKeys.Read:\n        return <ImportContactsRoundedIcon />;\n      case CommonTypes.ActionKeys.Examine:\n        return <FindInPageOutlinedIcon />;\n      case CommonTypes.ActionKeys.AddAgreement:\n        return <PostAddRoundedIcon />;\n      case CommonTypes.ActionKeys.Divit:\n        return <AttachFileRoundedIcon />;\n      case CommonTypes.ActionKeys.Refresh:\n        return <RefreshRoundedIcon/>;\n\n      default:\n        break;\n    }\n  };\n\n  static executeCommand(key) {\n    alert(\"no event. key:\" + key);\n    return;\n  }\n\n  generateActions = () => {\n    if (\n      this.props.actionListInfo &&\n      this.props.actionListInfo.actionKeyList &&\n      this.props.actionListInfo.actionKeyList.length > 0\n    ) {\n      let rtnObj = this.props.actionListInfo.actionKeyList.map(\n        (value, index) => {\n          return (\n            <Action\n              key={index + \"apbar\"}\n              ActionKey={value}\n              Icon={this.getIcon(value)}\n              ResourceCode={this.props.actionListInfo.resourceCode}\n              executeCommand\n              onExecuteCommand={ActionBar.executeCommand}\n            />\n          );\n        }\n      );\n\n      return rtnObj;\n    }\n  };\n\n  render() {\n    return <div>{this.generateActions()}</div>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    actionListInfo: state.actionListReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {},\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionBar);\n","export default class User {\n  userId;\n  userName;\n  email;\n  firstName;\n  lastName;\n  password;\n  MemberId;\n  token;\n  expiration;\n  //kullanıcı apartman bilgisi\n  apartment;\n  //üyelik paketi\n  subscription;\n  //bildirim\n  inboxNotificationCount;\n  generalNotificationCount;\n  //kaynak\n  resourceActionList;\n\n  //parola değişikliği gerekiyor!\n  shouldNewPassword;\n\n  // kurumsal\n  isCorporateUser;\n  company;\n}\n\nexport class Subscription {\n  subscriptionId;\n  userId;\n  startDate;\n  endDate;\n  memberLimit;\n  apartmentLimit;\n}\n","import axios from \"axios\";\n\nclass HttpClientService {\n  constructor() {\n    localStorage.removeItem(\"user\");\n\n    const token = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance = axios.create({\n      baseURL: \"/\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  get(url) {\n    return this.axiosInstance\n      .get(url)\n      .then((resp) => {\n        return Promise.resolve(resp);\n      })\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          localStorage.removeItem(\"user\");\n          window.location.replace(\"http://localhost:3000\");\n        } else {\n          return Promise.reject(resp);\n        }\n      });\n  }\n\n  post(url, data) {\n    return this.axiosInstance\n      .post(url, data)\n      .then((resp) => {\n        return Promise.resolve(resp);\n      })\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          console.log(\"unauthorized!!\");\n          localStorage.removeItem(\"user\");\n          window.location.replace(\"http://localhost:3000\");\n        }\n        return Promise.reject(resp);\n      });\n  }\n\n  setTokenOnLogin = (token = \"\") => {\n    // const tokens = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance.defaults.headers = { Authorization: `Bearer ${token}` };\n  };\n  clearTokenOnLogout = () => {\n    localStorage.removeItem(\"user\");\n    this.axiosInstance.defaults.headers = {};\n  };\n}\n\nexport const HttpClientServiceInstance = new HttpClientService();\n","/**\n * Response class for the all responses\n */\nimport {StringBuilder} from \"./Helper\";\n\n/**\n * genel response yapısıdır.\n */\nexport class Response {\n    constructor() {\n        this.success = true;\n        this.value = {};\n        this.results = [];\n    }\n\n    /**\n     * hata ekler\n     * @param message {string}\n     * @param severity {number}\n     * @param errorCode {string}\n     */\n    addResult = (message, severity, errorCode = \"no code\") => {\n        //todo severity bilgisine göre log işlenecek..\n        console.log(\"pushed error result:\",message);\n        if (message && message.length > 0) {\n            this.results.push(new Result(errorCode, message, severity))\n            if (this.results.length > 0) {\n                this.success = false;\n            }\n        }\n    }\n\n    /**\n     * api tarafından gelen resultları alır.\n     * @param results\n     */\n    addCoreResults(results){\n        for (let result of results) {\n            this.addResult(result.errorMessage,result.severity,result.errorCode );\n        }\n    }\n    /**\n     * getting string formatted.\n     * @returns {string}\n     */\n    getResultsStringFormat = () => {\n        let string = new StringBuilder();\n\n        if (this.results.length > 0) {\n            for (let result of this.results) {\n                if (result.ErrorMessage.length > 1)\n                    string.appendLine(result.ErrorMessage);\n            }\n        }\n        return string.toString();\n    }\n}\n\n/**\n * the result\n */\nclass Result {\n    constructor(code, message, severity) {\n        this.ErrorCode = code;\n        this.ErrorMessage = message;\n        this.Severity = severity;\n    }\n}\n\n/**\n * the severity\n * hata seviyeleri\n */\nexport const Severity = {\n    /**\n     * düşük derecede hata (kullanıcı hatası, geçersiz input değeri gibi..)\n     */\n    Low: 1,\n    /**\n     * geliştiriciyi ilgilendiren hata türü...\n     */\n    High: 2,\n};\n","import { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport Cache from \"./Cache\";\nimport { Response, Severity } from \"../Core/Response\";\nimport { InboxmessageContract } from \"../Models/InboxMessageContract\";\nimport User from \"../Models/User\";\n\n/**\n * login the user\n * @param userContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function LoginUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"auth\", \"login\");\n\n  Cache.setItem(\"lastloginrequestuser\", contract);\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        //parola değişikliği gerekiyor mu?\n        if (\n          res.data.data.accessToken &&\n          res.data.value.accessToken.token &&\n          res.data.value.accessToken.token.length > 0 &&\n          res.data.value.shouldNewPassword\n        ) {\n          HttpClientServiceInstance.setTokenOnLogin(\n            res.data.value.accessToken.token\n          );\n          response.value = { shouldNewPassword: true };\n        } else {\n\n          if(res.data.data && res.data.data.token){\n            let token = res.data.data.token;\n            let expriation = res.data.data.expiration;\n            HttpClientServiceInstance.setTokenOnLogin(token);\n\n            let user = new User();\n            user.token = token;\n            user.expiration = expriation;\n            response.value = user;\n          }else {\n            response.addResult(\"Token bilgisi alınamadı.\",Severity.High);\n          }\n\n          /*\n          let userData = res.data.value.userDefinitionContract;\n\n          let user = new User();\n          user.userId = userData.userId;\n          user.email = userData.email;\n          user.firstName = userData.firstName;\n          user.lastName = userData.lastName;\n          user.userName = userData.userName;\n\n          if (res.data.value.companyContract) {\n            user.isCorporateUser = true;\n            user.company = { ...res.data.value.companyContract };\n          }\n\n          if (res.data.value.apartmentContract) {\n            user.apartment = res.data.value.apartmentContract;\n          }\n          user.token = res.data.value.accessToken.token;\n          user.expiration = res.data.value.accessToken.expiration;\n          HttpClientServiceInstance.setTokenOnLogin(user.token);\n\n          user.inboxNotificationCount = userData.inboxNotificationCount;\n          user.generalNotificationCount = 0; //doldurulacak - sunucu tarafı null\n\n          //resources\n          user.resourceActionList = res.data.value.resourceActions;\n\n          localStorage.setItem(\"user\", JSON.stringify(user));\n          HttpClientServiceInstance.setTokenOnLogin(user.token);\n\n          response.value = user;\n          SetUserResources(user.resourceActionList);\n\n           */\n\n        }\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"login\");\n    });\n\n  return response;\n}\n\n/**\n * parolayı yenilemek için doğrulama kodu istenir.\n * @param {userContract} userContract\n */\nexport async function ForgotPassword(userContract) {\n  let ro = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"forgotpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n      } else {\n        ro.addCoreResults(res.data.results);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  return ro;\n}\n\n/**\n * yeni şifre belirler\n * @param {string} password\n */\nexport async function SetNewPassword(password, email) {\n  let ro = new Response();\n  let contract = new User();\n  contract.email = email;\n  contract.password = password;\n\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"newpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n        return ro;\n      } else {\n        ro.addCoreResults(res.data.results);\n        return ro;\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      ro.addResult(\"Parola değişikliği yapılamadı.\");\n      return ro;\n    });\n}\n/**\n * gelen kutusu bilgilerini getirir.\n * @param inboxmessageContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetUserInboxList(inboxmessageContract) {\n  let response = new Response();\n  let inboxContract = new InboxmessageContract();\n  inboxContract = inboxmessageContract;\n\n  if (inboxContract.receiverUserId > 0) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"getusermessages\"),\n      inboxContract\n    )\n      .then((res) => {\n        response.value = res.data;\n        console.log(\"inbox data:\", response.value);\n      })\n      .catch((err) => {\n        response.addResult(\"mesajlar getirilemedi.\", Severity.High, \"server\");\n      });\n  } else {\n    response.addResult(\n      \"üye id bilgisi alınamadı\",\n      Severity.Low,\n      \"null parameter\"\n    );\n  }\n\n  return response;\n}\n\n/**\n *\n * @returns {Promise<void>}\n * @param inboxId\n */\nexport async function updateMessageStatusForReaded(inboxId) {\n  let response = new Response();\n  let inboxContract = new InboxmessageContract();\n  inboxContract.inboxId = inboxId;\n\n  if (inboxContract.inboxId > 0) {\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"user\", \"updatemessagestatus\"),\n      inboxContract\n    )\n      .then((res) => {\n        response.value = res.data;\n        console.log(\"message status updated\");\n      })\n      .catch((err) => {\n        response.addResult(\"mesajlar getirilemedi.\", Severity.High, \"server\");\n      });\n  } else {\n    response.addResult(\n      \"mesaj id bilgisi alınamadı\",\n      Severity.Low,\n      \"null parameter\"\n    );\n  }\n\n  return response;\n}\n\n/**\n * kaynak-aksiyon normalizasyonu yapılır.\n * @param {array} resourceActions\n */\nfunction SetUserResources(resourceActions) {\n  if (resourceActions && resourceActions.length > 0) {\n    // var s = {\n    //     parentCode:'',\n    //     parentName:'',\n    //     resources=[{\n    //         resourceCode:'',\n    //         resourceName:'',\n    //         Actions:[{\n    //\n    //         }]\n    //     }]\n    // }\n    let resourceList = [];\n\n    for (let item of resourceActions) {\n      //parent yoksa eklenir.\n      if (!resourceList.find((x) => x.parentCode === item.parentCode)) {\n        let tmpRes = {};\n        tmpRes.parentCode = item.parentCode;\n        tmpRes.parentName = item.parentName;\n        tmpRes.resources = [];\n        tmpRes.resources.Actions = [];\n        resourceList.push(tmpRes);\n      }\n\n      let ind = resourceList.findIndex((r) => r.parentCode === item.parentCode);\n      // let tmpR = resourceList[ind].Resources.find(val => val.resourceCode === item.resourceCode);\n\n      //ekran eklenmemişse eklenir.\n      if (\n        !resourceList[ind].resources.find(\n          (val) => val.resourceCode === item.resourceCode\n        )\n      ) {\n        let resourceSub = {\n          resourceCode: item.resourceCode,\n          name: item.name,\n          iconKey: item.iconKey,\n          path: item.path,\n          actions: [],\n        };\n        resourceList[ind].resources.push(resourceSub);\n      }\n\n      //aksiyon eklenmemişse eklenir\n      if (\n        resourceList[ind].resources.find(\n          (val) => val.resourceCode === item.resourceCode\n        ) &&\n        !resourceList[ind].resources\n          .find((val) => val.resourceCode === item.resourceCode)\n          .actions.find((r) => r.actionKey === item.actionKey)\n      ) {\n        let act = {\n          actionName: item.actionName,\n          actionKey: item.actionKey,\n        };\n        resourceList[ind].resources\n          .find((val) => val.resourceCode === item.resourceCode)\n          .actions.push(act);\n      }\n    }\n    Cache.overrideItem(\"resources\", resourceList);\n  }\n}\n/**\n * kurum kullanıcı kaydı\n * @param {Company} companyContract\n */\nexport async function RegisterCompany(companyContract) {\n  let ro = new Response();\n\n  return await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"user\", \"savecompany\"),\n    companyContract\n  )\n    .then((res) => {\n      if (!res && !res.data) {\n        ro.addResult(\"Kullanıcı oluşturulamadı.\");\n        return ro;\n      } else {\n        if (res.data && res.data.success) {\n          ro.value = res.data.value;\n          return ro;\n        } else {\n          ro.addCoreResults(res.data.results);\n          return ro;\n        }\n      }\n    })\n    .catch((err) => {\n      ro.addResult(\"İşlem gerçekleştirilemedi.\");\n      return ro;\n    });\n}\n","import * as actionTypes from \"./action-types\";\nimport User from \"../../Models/User\";\nimport { LoginUser } from \"../../Services/UserService\";\nimport { ShowStatusError } from \"../../Core/Helper\";\n\n//import Log from \"../../Services/Log\";\n\n/**\n *\n * @param {User}\n * @returns {{payload: *, type: string}}\n * @constructor\n */\nexport function LoginSuccess(userContract) {\n  return {\n    type: actionTypes.LOGIN,\n    payload: userContract,\n  };\n}\n\nexport function ChangeLoginStatusSuccess(\n  token,\n  expiration,\n  isSuccess,\n  isNewPassword = false\n) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_STATUS,\n    payload: {\n      token,\n      expiration,\n      isSuccess,\n      isNewPassword,\n    },\n  };\n}\n\nexport function ChangeLoginStatus(jwtObject) {\n  return function (dispatch) {\n    dispatch(\n      ChangeLoginStatusSuccess(\n        jwtObject.token,\n        jwtObject.expiration,\n        jwtObject.isSuccess,\n        jwtObject.isNewPassword\n      )\n    );\n  };\n}\n\nexport function ChangeLoginToNewPasswordSuccess(email) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_NEW_PASSWORD,\n    payload: {\n      email,\n    },\n  };\n}\nexport function ChangeLoginToNewPassword(email) {\n  return function (dispatch) {\n    dispatch(ChangeLoginToNewPasswordSuccess(email));\n  };\n}\n\n/**\n * kullanıcı login olur\n * @param {User} user login kullanıcısı\n * @returns \n */\nexport function Login(user) {\n  return function (dispatch) {\n    return LoginUser(user)\n      .then((res) => {\n        if (res.success) {\n          if (res.value.shouldNewPassword) {\n            //dispatch(ChangeLoginToNewPassword(user.email));\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, false, true)\n            );\n          } else {\n            user = res.value;\n            dispatch(LoginSuccess(user));\n            //test\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, true)\n            );\n          }\n        } else {\n          ShowStatusError(res.getResultsStringFormat());\n          dispatch(ChangeLoginStatusSuccess(\"\", new Date(), false));\n          dispatch(LoginSuccess(new User()));\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n}\n","import { Button, Grid, TextField, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { connect } from \"react-redux\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport { bindActionCreators } from \"redux\";\nimport { SetNewPassword } from \"../../Services/UserService\";\nimport Cache from \"../../Services/Cache\";\n\n/**\n * password change component\n */\nclass PasswordChange extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: Cache.getItem(\"lastloginrequestuser\"),\n      newPassword: \"\",\n      newPassword2: \"\",\n    };\n  }\n\n  onSubmitForm = async () => {\n    if (IsNullOrEmpty(this.state.user.email)) {\n      ShowStatusError(\"mail adresi alınamadı.\");\n      return;\n    }\n    if (this.state.newPassword.length < 8) {\n      ShowStatusError(\"şifreniz en az 8 karakter olmalıdır.\");\n      return;\n    }\n    if (IsNullOrEmpty(this.state.newPassword)) {\n      ShowStatusError(\"yeni şifrenizi giriniz.\");\n      return;\n    }\n    if (this.state.newPassword.trim() !== this.state.newPassword2.trim()) {\n      ShowStatusError(\n        \"girdiğiniz parola ve tekrarı bir biri ile eşleşmemektedir.\"\n      );\n      return;\n    }\n\n    /**yeni parola kaydı */\n    await SetNewPassword(this.state.newPassword, this.state.user.email)\n      .then((response) => {\n        if (response && !response.success) {\n          ShowStatusError(response.getResultsStringFormat());\n        } else {\n          ShowStatusSuccess(\n            \"şifreniz kaydedildi. yeniden giriş yapabilirsiniz.\"\n          );\n          this.changeStatus();\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  changeStatus = () => {\n    this.props.actions.changeLoginStatus({\n      token: \"\",\n      expiration: new Date(),\n      isSuccess: false,\n    });\n  };\n  render() {\n    return (\n      <Grid container spacing={3} direction={\"row\"}>\n        <Grid item>\n          <Typography>{this.state.user.email}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre\"}\n            required\n            value={this.state.newPassword}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre tekrar\"}\n            required\n            value={this.state.newPassword2}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword2: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SaveIcon />}\n            onClick={(e) => {\n              this.onSubmitForm();\n            }}\n          >\n            Kaydet\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\nfunction mapStateToProps(state) {\n  return {\n    loginJwtObject: state.changeLoginStatusReducer,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChange);\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\nimport Cache from \"../../Services/Cache\";\nimport {HttpClientServiceInstance} from \"../../Services/HttpClient\";\n\nexport function getCityListSuccess(city) {\n  return {\n    type: actionTypes.GETCITYLIST,\n    payload: city,\n  };\n}\n\nexport function changeSelectedCityId(cityId) {\n  return {\n    type: actionTypes.CHANGE_SELECTED_CITY_ID,\n    payload: cityId,\n  };\n}\n\nexport function getCityList() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CityList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CityList))\n      );\n    }\n\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"citylist\");\n    \n    return HttpClientServiceInstance.post(url)\n        .then((res) => {\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n      dispatch(getCityListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n\nexport function getCountyListSuccess(countylist) {\n  return {\n    type: actionTypes.GETCOUNTYLIST,\n    payload: countylist,\n  };\n}\n\nexport function getCountyListAll() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CountyList))\n      );\n    }\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"countylist\");\n    return HttpClientServiceInstance.post(url).then((res) => {\n      //caching yapılır..\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n\n      dispatch(getCountyListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n","import React, { Component } from \"react\";\nimport { GoogleLogin } from \"react-google-login\";\n//import {refreshTokenSetup} from \"./refresh-token-setup\";\n\nconst ClientId =\n  \"526937451548-d0q03t1ass9qgbipavmqms3ttrhpgma6.apps.googleusercontent.com\";\n\nclass GoogleLoginComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isDisable: false,\n    };\n  }\n\n  onSuccess = (res) => {\n    console.log(\"login successs - user : \", res.profileObj);\n    //todo: storage implemantasyon tamamlanacak.\n    // refreshTokenSetup(res);\n  };\n\n  onFailure = (res) => {\n    console.log(\"failure user : \", res);\n  };\n\n  render() {\n    return (\n      <div\n        className={\"google-login-div\"}\n        style={{ justifyContent: \"center\", justifyItems: \"center\" }}\n      >\n        <GoogleLogin\n          clientId={ClientId}\n          buttonText={\"Google ile giriş yap\"}\n          onSuccess={this.onSuccess}\n          onFailure={this.onFailure}\n          cookiePolicy={\"single_host_origin\"}\n          style={{ marginTop: \"100px\", width: \"100%\" }}\n          isSignedIn={true}\n          disabled={this.state.isDisable}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GoogleLoginComponent;\n","import React, { Component } from \"react\";\nimport {\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  FormFeedback,\n} from \"reactstrap\";\nimport User from \"../../Models/User\";\nimport Messages from \"../../Types/Messages\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityActions from \"../../redux/actions/city-county-actions\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport GoogleLoginComponent from \"./google/google-login\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { Checkbox, FormControlLabel, Grid, Typography } from \"@material-ui/core\";\nimport { ForgotPassword } from \"../../Services/UserService\";\n\n/*\n * Login component (giriş yap)\n * */\nclass Login extends Component {\n  loginUserContract = new User();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataContract: {\n        Email: \"\",\n        Password: \"\",\n      },\n      validate: {\n        emailState: \"\",\n      },\n      isForgotPassword: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.actions.changeLoginStatus({\n      token: \"\",\n      expiration: new Date(),\n      isSuccess: false,\n    });\n\n  }\n\n  validateEmail(e) {\n    const emailRex =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const { validate } = this.state;\n    if (emailRex.test(e.target.value)) {\n      validate.emailState = \"has-success\";\n    } else {\n      validate.emailState = \"has-danger\";\n    }\n    this.setState({ validate });\n  }\n\n  onForgotPassword = async () => {\n    let user = this.state.dataContract;\n    if (IsNullOrEmpty(user.Email)) {\n      ShowStatusError(\"mail adresinizi giriniz.\");\n      return;\n    }\n\n\n    await ForgotPassword(user)\n      .then((res) => {\n        if (res.success) {\n          ShowStatusSuccess(\n            \"Parola değiştirebilmeniz için doğrulama kodu mail adresinize gönderilmiştir.\"\n          );\n          this.setState({\n            ...this.state,\n            dataContract: {},\n            isForgotPassword: false,\n            validate: { emailState: \"\" },\n          });\n        } else {\n          ShowStatusError(res.getResultsStringFormat);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n            <Grid container direction=\"column\"  alignContent=\"center\" justifyContent=\"stretch\" spacing={3}>\n                <Grid item>\n                  <Typography variant=\"h3\"> Login </Typography>\n                </Grid>\n                <Grid item>\n                  <hr />\n                </Grid>\n                <Grid item>\n                  <Form className=\"form\">\n                    <Col>\n                      <FormGroup>\n                        <Label>{Messages.LabelNames.email}</Label>\n                        <Input\n                          valid={\n                            this.state.validate.emailState === \"has-success\"\n                          }\n                          invalid={\n                            this.state.validate.emailState === \"has-danger\"\n                          }\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"userEmail\"\n                          autoComplete=\"username\"\n                          placeholder=\"\"\n                          onChange={(e) => {\n                            this.loginUserContract.email = e.target.value;\n                            var datac = this.state.dataContract;\n                            datac.Email = e.target.value;\n                            this.setState({ dataContract: datac });\n                          }}\n                          onBlur={(e) => this.validateEmail(e)}\n                        />\n                        <FormFeedback valid={true}>\n                          {\" \"}\n                          {Messages.EMailValid}\n                        </FormFeedback>\n                        <FormFeedback invalid=\"true\">\n                          {Messages.EMailInvalid}\n                        </FormFeedback>\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Label for=\"userLoginPassword\">\n                          {Messages.LabelNames.password}\n                        </Label>\n                        <Input\n                          type=\"password\"\n                          name=\"password\"\n                          id=\"userLoginPassword\"\n                          autoComplete=\"current-password\"\n                          onChange={(e) => {\n                            this.loginUserContract.password = e.target.value;\n                          }}\n                          disabled={this.state.isForgotPassword}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              onChange={(e) => {\n                                this.setState({\n                                  isForgotPassword: e.target.checked,\n                                });\n                              }}\n                              checked={this.state.isForgotPassword}\n                              name=\"forgot\"\n                            />\n                          }\n                          label=\"Parolamı Unuttum\"\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Button\n                          color={\"primary\"}\n                          onClick={(e) => {\n                            if (this.state.isForgotPassword)\n                              this.onForgotPassword();\n                            else {\n                              if (\n                                IsNullOrEmpty(this.loginUserContract.email) ||\n                                IsNullOrEmpty(this.loginUserContract.password)\n                              ) {\n                                ShowStatusError(\n                                  \"Email ve parola alanlarını doldurunuz.\"\n                                );\n                                return;\n                              }\n                              this.props.actions.loginUser(\n                                this.loginUserContract\n                              );\n                            }\n                          }}\n                        >\n                          {this.state.isForgotPassword\n                            ? \"Doğrulama Kodu Al\"\n                            : Messages.ActionNames.enter}\n                        </Button>\n                      </FormGroup>\n                    </Col>\n                  </Form>\n                </Grid>\n                <Grid item>\n                  <hr />\n                </Grid>\n                <Grid item>\n                  <GoogleLoginComponent />\n                </Grid>\n              </Grid>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCityList: bindActionCreators(cityActions.getCityList, dispatch),\n      loginUser: bindActionCreators(loginActions.Login, dispatch),\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport AppBarMenu from \"./Navigation/app-bar\";\nimport {Card, Container} from \"@material-ui/core\";\nimport ActionBar from \"./Navigation/action-bar\";\n\nimport {bindActionCreators} from \"redux\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport PasswordChange from \"./Begin/password-change\";\nimport Login from \"./Begin/Login\";\n\nfunction Layout(props) {\n    let loginControl = () => {\n         let usr = window.localStorage.getItem(\"user\");\n        // window.localStorage.removeItem(\"user\");\n        // let userc = new User();\n        // userc.userId = 1007;\n        // userc.firstName = \"api\";\n        // userc.lastName = \"api\";\n        // userc.email = \"api@gmail.com\";\n        // userc.token = \"asdasffasdf\";\n        // userc.userName = \"api\";\n        // userc.inboxNotificationCount = 0;\n        //\n        // window.localStorage.setItem(\"user\", JSON.stringify(userc));\n        // console.log(\"user active :\", userc);\n        //\n        // return props.children;\n        //todo: test e çıkmadan önce log-in geri aktifleştirilecek.\n        // eslint-disable-next-line no-unreachable\n        if (\n            props.loginJwtObject &&\n            props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword === false\n        ) {\n            return props.children;\n        } else if (\n            props.loginJwtObject &&\n            !props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword\n        ) {\n            return <PasswordChange/>;\n        } else {\n            return (\n                <div>\n                    <Login/>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <AppBarMenu>\n            <Container maxWidth=\"xl\">\n                <Card>\n                    <CardActions>\n                        <ActionBar/>\n                    </CardActions>\n                    <CardContent>\n                        {props.loginJwtObject ? loginControl() : <p/>}\n                    </CardContent>\n                </Card>\n            </Container>\n        </AppBarMenu>\n    );\n}\n\n//#region redux\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeBackdropStatus: bindActionCreators(\n                pageActions.changeBackDropStatus,\n                dispatch\n            ),\n        },\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        loginJwtObject: state.changeLoginStatusReducer,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n\n//#endregion\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MUIDataTable from \"mui-datatables\";\n\n/**\n * listeleme tablosu\n * https://github.com/gregnb/mui-datatables#api\n */\nclass DataTable extends Component {\n  options = {\n    filterType: \"checkbox\",\n    onRowSelectionChange: this.props.onSelectedItemChange,\n    selectableRows: \"single\",\n    selectableRowsOnClick: true,\n    // onRowClick: (rowData, rowMeta) => {\n    //   debugger;\n    //   //todo : seçili satırla güncelleme yapılabilecek.\n    //   var a = rowData;\n    //   var g = rowMeta;\n    // },\n  };\n\n  render() {\n    return (\n      <div>\n        <MUIDataTable\n          title={this.props.title}\n          data={this.props.data}\n          columns={this.props.columns}\n          options={this.options}\n        />\n      </div>\n    );\n  }\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  onSelectedItemChange: PropTypes.func,\n};\n\nexport default DataTable;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport PropTypes from \"prop-types\";\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n/**\n * dialog form\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function DialogForm(props) {\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = () => {\n    if (props.handleClose) props.handleClose();\n\n    setOpen(false);\n  };\n\n\n  return (\n      <Dialog\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth={\"md\"}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {props.title}\n        </DialogTitle>\n        <DialogContent dividers>\n          {props.content ? props.content : <p>no content.</p>}\n        </DialogContent>\n        <DialogActions>\n          {props.actions ? (\n            props.actions\n          ) : (\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Tamam\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n  );\n}\n\nDialogForm.propTypes = {\n actions: PropTypes.any,\n content:PropTypes.any.isRequired,\n title:PropTypes.any.isRequired\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport Cache from \"./Cache\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { Response, Severity } from \"../Core/Response\";\nimport Country from \"../Models/Country\";\n\n/**\n * the parameter services\n */\nexport class ParameterService {\n  /**\n   * parametre listesi döndürür.\n   * @param {String} paramType - parametre tipi\n   */\n  async GetParameter(paramType) {\n    let returnObject = new Response();\n\n    if (!paramType || paramType.length < 1) {\n      returnObject.addResult(\"Parametre tipi alınamadı.\", Severity.Low);\n      return returnObject;\n    }\n\n    let parameters = [];\n\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"core\", \"getparameter\"),\n      {\n        ParamType: paramType,\n      }\n    )\n      .then((res) => {\n        let data = res.data;\n        if (data && data.length > 0) {\n          data.forEach((element) => {\n            parameters.push(element);\n          });\n          Cache.setParameter(paramType, parameters);\n        }\n\n        returnObject.valueList = parameters;\n      })\n      .catch((e) => {\n        console.log(e);\n        returnObject.addResult(\"parametre listesi getirilemedi.\", Severity.Low);\n      });\n\n    return returnObject;\n  }\n}\n\n/**\n * rol listesini döndürür\n */\nexport async function GetRoleList() {\n  let returnData = [];\n\n  if (Cache.lru.has(\"rolelist\")) {\n    let listfromcache = Cache.lru.get(\"managerapartmentlist\");\n    returnData = listfromcache;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"core\", \"getrolelist\")\n  )\n    .then((res) => {\n      let data = res.data;\n      if (data && data.length > 0) {\n        Cache.lru.set(\"rolelist\", data);\n      }\n      returnData = data ? data : [];\n    })\n    .catch((e) => {\n      console.log(e);\n      returnData = undefined;\n    });\n\n  return returnData;\n}\n\n/**\n * ülke listesi getirir.\n * @returns []\n */\nexport async function GetCountryList(){\n  let returnData = [];\n\n  await HttpClientServiceInstance.get(\n    CommonTypes.GetUrlForAPI(\"constants\", \"get-countries-list\")\n  )\n    .then((res) => {\n        if(res.data && res.data.data){\n            let data = res.data.data;\n            let countryList = [];\n            if (data && data.length > 0) {\n                for (const item of data) {\n                    countryList.push({name:item.constantValue,code:item.constantCode})\n                }\n                Cache.lru.set(\"countrylist\", data);\n            }\n            returnData = countryList;\n        }\n    })\n    .catch((e) => {\n      console.log(e);\n      returnData = undefined;\n    });\n\n  return returnData;\n}\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {TextField} from \"@material-ui/core\";\n\n/**\n * combobox component\n * @param {*} props props\n */\nclass ComboBox extends Component {\n\n    constructor(props) {\n        super(props);\n        let defaultList = [{name: 'Seçiniz'}]\n        this.state = {\n            defaultValue: props.defaultValue ? props.defaultValue : undefined,\n            dataList: props.itemSource && props.itemSource.length > 0 ? props.itemSource:defaultList,\n            selectedValue: {name: 'Seçiniz'},\n            isDisable: props.disabled,\n            label: props.label\n        }\n    }\n\n    componentDidMount() {\n        let tempList = [];\n        if (this.props.itemSource.length > 0) {\n            tempList.push(...this.props.itemSource);\n        }\n        this.setState({dataList:tempList,selectedValue:tempList[0]})\n        if(this.props.defaultValue){\n            let dt = this.state.dataList.find((v) => v === this.props.defaultValue)\n            if(dt){\n                this.setState({selectedValue:dt})\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        \n        if(this.props.itemSource.length !== prevProps.itemSource.length){\n            let tempList = [];\n            if (this.props.itemSource.length > 0) {\n               tempList = this.props.itemSource;\n               tempList.splice(0,0,{name: 'Seçiniz'})\n            }\n            this.setState({dataList:tempList,selectedValue:tempList[0]})\n        }\n    }\n\n    render() {\n        \n        return (\n            <div>\n                <Autocomplete\n                    id=\"combo-box-demo\"\n                    options={this.state.dataList}\n                    value={this.state.selectedValue}\n                    getOptionLabel={(option) => option.name}\n                    renderInput={(params) => (\n                        <TextField {...params} label={this.state.label} variant=\"outlined\" fullWidth={this.props.fullWidth}/>\n                    )}\n                    onChange={(e, value, reason) => {\n                        this.setState({selectedValue: value})\n\n                        if (this.props.onSelectedItemChange && value) {\n                            this.props.onSelectedItemChange(value);\n                        }\n                    }}\n                    fullWidth\n                    disabled={this.state.isDisable}\n                />\n            </div>\n        );\n    }\n\n}\n\nComboBox.propTypes = {\n    label: PropTypes.string.isRequired,\n    onSelectedItemChange: PropTypes.func,\n    itemSource: PropTypes.array.isRequired,\n    fullWidth: PropTypes.bool\n};\n\nexport default ComboBox;\n","import { Response, Severity } from \"../Core/Response\";\nimport { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n\n/**\n * hotel listesi döndürür.\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetHotels() {\n    let returnObject = new Response();\n    \n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"get-hotel-list\");\n\n    await HttpClientServiceInstance.get(\n        url\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = res.data.data;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"GETHOTELS\");\n        }\n    })\n    .catch(err => {\n        returnObject.addResult(\"hotel listesi getirilemedi.\");\n    });\n\n    return returnObject;\n}\n\n/**\n * yeni otel kaydı\n * @param {HotelModel} model\n * @return {Response}\n */\nexport async function SaveHotel(model) {\n    let returnObject = new Response();\n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"add-hotel\");\n\n    await HttpClientServiceInstance.post(\n        url,model\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = res.data.data;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"SAVEHOTEL\");\n        }\n    })\n    .catch(err => {\n        console.log(err);\n        returnObject.addResult(\"hotel kaydı yapılamadı.\");\n    })\n\n    return returnObject;\n}","export default class HotelModel {\n    hotelId\n    hotelName\n    hotelCode\n    hotelAdminName\n    hotelAdminMail\n    creationdate\n    validSectors\n    allowGeneralCard=false\n    options\n    countryCode\n    mobileCountryCode\n    mobileNumber\n    contactType=1; //email 2-telefon\n    address\n}\n\n/*\npublic enum UserTypes\n{\nsystemManager = 1,\nartesAdmin = 2, // Biz ekleyeceğiz tüm yetkiler olacak\nartesPersonel = 3, // Artes web ekranından eklenecek yetkiler olacak\nhotelAdmin = 4, // Artes ekranından otel tanımlarken otomatik oluşacak otel için gerekli tüm yetkiler olacak.\nhotelPersonel = 5 // Hotel yönetim masaüstü uygulamasından eklenecek yetkiyi hotel edmin yönetebilecek.(biz bir takım yetkiler tanımlayacağız onlardan seçecek.)\n}\n\n\n\n\npublic enum ContactType\n{\nmail = 1,\ngsm = 2\n}\n\n\n\npublic enum RoomStatus\n{\nBos = 1,\nDolu = 2,\nTemizdegil = 3\n}\n* */","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Avatar, Card, CardContent, CardHeader, Grid, TextField} from \"@material-ui/core\";\nimport {GetIntValue, IsNullOrEmpty, IsNullOrEmptyAll, ShowStatusError} from \"../Core/Helper\";\nimport ComboBox from \"./ToolBox/combo-box\";\nimport PropTypes from \"prop-types\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nclass HotelAdd extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderCount:0,\n            hotel: {\n                validSectors:\"1,2,3,4,5,6,7,8,9,10\"\n            },\n            countryList: props.countryList && props.countryList.length > 0 ? props.countryList : [],\n            isLoading:true,\n            defaultCountry:{},\n            validation:{\n                hotelName:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                countryCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelAdminName:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelAdminMail:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                validSectors:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                mobileCountryCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                mobileNumber:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                address:{\n                    isValid:true,\n                    helperText:\"\"\n                }\n            }\n        };\n\n    }\n\n    validateAndSetHotel = ()=>{\n    if(IsNullOrEmptyAll([this.state.hotel.hotelName,this.state.hotel.hotelAdminName,\n        this.state.hotel.hotelAdminMail,this.state.hotel.address,this.state.hotel.mobileNumber,this.state.hotel.validSectors])){\n        return;\n    }\n    if(GetIntValue(this.state.hotel.hotelCode)< 1 ||\n        GetIntValue(this.state.hotel.countryCode)< 1 ||\n        GetIntValue(this.state.hotel.mobileCountryCode)< 1){\n        return;\n    }\n\n    if(this.props.setHotel) this.props.setHotel(this.state.hotel)\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardHeader\n                    avatar={\n                        <Avatar\n                            aria-label=\"recipe\"\n                            style={{backgroundColor: \"#26bdba\"}}\n                        >\n                            \"A\"\n                        </Avatar>\n                    }\n                    title={\"ARTES\"}\n                    subheader={\"NEW HOTEL\"}\n                />\n                <CardContent>\n                    <Grid container spacing={3} direction=\"column\" alignItems=\"stretch\">\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth={true}\n                                required\n                                error={!this.state.validation.hotelName.isValid}\n                                helperText={this.state.validation.hotelName.helperText}\n                                label=\"Hotel Name\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.hotelName = e.target.value\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.hotelName)){\n                                        validObj.hotelName.isValid = false;\n                                        validObj.hotelName.helperText = \"Geçerli bir otel ismi girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelName.isValid = true\n                                        validObj.hotelName.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelCode.isValid}\n                                helperText={this.state.validation.hotelCode.helperText}\n                                type={\"number\"}\n                                label=\"Hotel Code\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.hotelCode = parseInt(e.target.value);\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(GetIntValue(this.state.hotel.hotelCode) < 1){\n                                        validObj.hotelCode.isValid = false;\n                                        validObj.hotelCode.helperText = \"Geçerli bir otel kodu girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelCode.isValid = true\n                                        validObj.hotelCode.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <ComboBox\n                                itemSource={this.state.countryList}\n                                label=\"Country\"\n                                fullWidth={true}\n                                onSelectedItemChange={ (selectedValue)=>{\n                                    this.state.hotel.countryCode = selectedValue.code\n                                    this.validateAndSetHotel();\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelAdminName.isValid}\n                                helperText={this.state.validation.hotelAdminName.helperText}\n                                label=\"Admin Name\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.hotelAdminName = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.hotelAdminName)){\n                                        validObj.hotelAdminName.isValid = false;\n                                        validObj.hotelAdminName.helperText = \"Geçerli bir isim girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelAdminName.isValid = true\n                                        validObj.hotelAdminName.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelAdminMail.isValid}\n                                helperText={this.state.validation.hotelAdminMail.helperText}\n                                label=\"Admin Email\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.hotelAdminMail = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                    const emailRex =\n                                        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                                    var validObj = {...this.state.validation};\n                                    if (emailRex.test(this.state.hotel.hotelAdminMail)) {\n                                        validObj.hotelAdminMail.isValid = true;\n                                        validObj.hotelAdminMail.helperText = \"\";\n                                    }else {\n                                        validObj.hotelAdminMail.isValid = false;\n                                        validObj.hotelAdminMail.helperText = \"Geçerli bir mail adresi girmelisiniz.\";\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.mobileCountryCode.isValid}\n                                helperText={this.state.validation.mobileCountryCode.helperText}\n                                type={\"number\"}\n                                label=\"Mobile Country Code\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.mobileCountryCode = parseInt(e.target.value);\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(GetIntValue(this.state.hotel.mobileCountryCode) < 1){\n                                        validObj.mobileCountryCode.isValid = false;\n                                        validObj.mobileCountryCode.helperText = \"Geçerli bir ülke kodu girmelisiniz.\";\n                                    }else{\n                                        validObj.mobileCountryCode.isValid = true\n                                        validObj.mobileCountryCode.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.mobileNumber.isValid}\n                                helperText={this.state.validation.mobileNumber.helperText}\n                                label=\"Mobile Phone Number\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.mobileNumber = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.mobileNumber)){\n                                        validObj.mobileNumber.isValid = false;\n                                        validObj.mobileNumber.helperText = \"Geçerli bir telefon numarası girmelisiniz.\";\n                                    }else{\n                                        validObj.mobileNumber.isValid = true\n                                        validObj.mobileNumber.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.address.isValid}\n                                helperText={this.state.validation.address.helperText}\n                                label=\"Adres\"\n                                variant=\"standard\"\n                                onChange={(e) => {\n                                    this.state.hotel.address = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.address)){\n                                        validObj.address.isValid = false;\n                                        validObj.address.helperText = \"Geçerli bir adres girmelisiniz.\";\n                                    }else{\n                                        validObj.address.isValid = true\n                                        validObj.address.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.validSectors.isValid}\n                                helperText={this.state.validation.validSectors.helperText}\n                                disabled={true}\n                                label=\"Valid Sectors\"\n                                variant=\"standard\"\n                                value={this.state.hotel.validSectors}\n                                onChange={(e) => {\n                                    this.state.hotel.validSectors = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.validSectors)){\n                                        validObj.validSectors.isValid = false;\n                                        validObj.validSectors.helperText = \"Geçerli bir sector girmelisiniz.\";\n                                    }else{\n                                        validObj.validSectors.isValid = true\n                                        validObj.validSectors.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nHotelAdd.defaultProps = {\n    countryList: PropTypes.array.isRequired,\n    setHotel:PropTypes.func.isRequired\n};\nexport default connect(\n    mapStateToProps,\n)(HotelAdd);","import React, {Component} from \"react\";\nimport {CommonTypes} from \"../Types/Common\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Card, Grid, Typography, CardHeader, CardContent, Avatar, TextField} from \"@material-ui/core\";\nimport DataTable from \"./ToolBox/DataTable\";\nimport DialogForm from \"./ToolBox/dialog-form\";\nimport {GetCountryList} from \"../Services/CoreService\";\nimport {IsNullOrEmpty, ShowStatusError, ShowStatusSuccess} from \"../Core/Helper\";\nimport ComboBox from \"./ToolBox/combo-box\";\nimport Button from \"@material-ui/core/Button\";\nimport {GetHotels, SaveHotel} from \"../Services/HotelService\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport HotelModel from \"../Models/hotel/HotelModel\";\nimport HotelAdd from \"./hotel-add\";\n\n\n/***\n * ana sayfa\n */\nclass Home extends Component {\n    static displayName = Home.name;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpenDialogForm: false,\n            hotel: {},\n            countryList: [],\n            hotelList:[],\n            isLoading:true,\n            selectedHotel:{},\n            defaultCountry:{},\n            isAddedHotelValid:false\n        };\n\n    }\n\n    columns = [\n        {\n            name: \"hotelName\",\n            label: \"Hotel Name\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"hotelAdminName\",\n            label: \"Admin Name\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"hotelAdminMail\",\n            label: \"Administrator\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"creationdate\",\n            label: \"Created At\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"validSectors\",\n            label: \"Valid Sectors\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"allowGeneralCard\",\n            label: \"Allow General Card\",\n            options: {filter: true, sort: true},\n        }\n    ];\n\n    componentDidMount() {\n        if (this.props.actions.changeActiveResourceCode) {\n            this.props.actions.changeActiveResourceCode(\n                CommonTypes.Resources.home.resourceCode\n            );\n        }\n\n        if (this.props.actions.executeCommand) {\n            this.props.actions.executeCommand(this.onExecute);\n        }\n\n        this.onLoad();\n    }\n\n    onLoad = async ()=>{\n        this.getCountries();\n        await Promise.all([this.getCountries,this.getList()])\n        this.setState({\n            isLoading:false\n        });\n    }\n\n    dialogContent = (<div></div>)\n\n    onExecute = async (key) => {\n        switch (key) {\n            ///create hotel\n            case CommonTypes.ActionKeys.CreateHotel:\n                this.setState({isOpenDialogForm: true})\n                break;\n            case CommonTypes.ActionKeys.GetList:\n                this.getList();\n                break;\n\n                default:\n                break;\n        }\n    };\n\n\n    dialogGridMdSize = 7;\n\n    getCountries = async () => {\n        await GetCountryList()\n            .then(\n                (data) => {\n                    if (data && data.length > 0) {\n                        this.setState({countryList: data})\n                    }\n                }\n            ).catch(e => {\n                console.error(e);\n                ShowStatusError(\"ülke listesi getirilemedi.\");\n            })\n    }\n\n    onCreate =async (hotelContract) => {\n        debugger;\n        var hotelModel = new HotelModel();\n        hotelModel = {...hotelContract};\n        hotelModel.allowGeneralCard = false;\n        hotelModel.contactType = 1;\n\n       var response = await SaveHotel(hotelModel);\n        if(!response || !response.success){\n            ShowStatusError(response.getResultsStringFormat());\n            return;\n        }\n       if(response && response.success){\n           ShowStatusSuccess(\"kayıt başarılı\");\n           await this.getList();\n       }\n\n    }\n\n    async getList(){\n        this.setState({isLoading:true})\n        GetHotels()\n            .then(response => {\n             if(!response.success){\n                 ShowStatusError(response.getResultsStringFormat());\n             }\n             if(response.value && response.value.length > 0){\n                 this.setState({hotelList:response.value,isLoading:false})\n             }\n            })\n            .catch(\n                e=>{\n                    ShowStatusError(e.message);\n                    this.setState({isLoading:false})\n                }\n            )\n    }\n\n    handleCloseDialog = () => {\n        this.setState({isOpenDialogForm: false});\n    };\n    handleOpenDialog = () => {\n        this.setState({isOpenDialogForm: true});\n    };\n\n    validateCreateModel = () => {\n        return this.state.isAddedHotelValid;\n    }\n\n    setHotel = (hotel)=>{\n        this.setState({\n            hotel:hotel,\n            isAddedHotelValid:true\n        });\n    }\n\n    render() {\n        return (\n            <LoadingOverlay\n            active={this.state.isLoading}\n            spinner\n            text={'loading...'}>\n                <Grid container direction=\"column\" spacing={3}>\n\n                    <Grid item>\n                        <Typography variant='h4'>\n                            Hotel\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Card elevation={1}>\n                            <DataTable\n                                columns={this.columns}\n                                data={this.state.hotelList}\n                                onSelectedItemChange={(\n                                    currentRowIndex,\n                                    allRowsIndexes,\n                                    rowsSelectedIndex\n                                ) => {\n                                 \n                                    if(this.state.hotelList && this.state.hotelList.length > 0 && rowsSelectedIndex){\n                                        var selectedData = this.state.hotelList[rowsSelectedIndex];\n                                        this.state.selectedHotel = selectedData\n                                    }\n                                }\n                                }\n                            />\n                        </Card>\n                    </Grid>\n                    {this.state.isOpenDialogForm ? (\n                        <DialogForm\n                            count={this.state.renderCount}\n                            title={\"Create Hotel\"}\n                            content={(<HotelAdd countryList={this.state.countryList} setHotel={this.setHotel} />)}\n                            handleClose={this.handleCloseDialog}\n                            actions={(\n                                <Button autoFocus\n                                        disabled={!this.state.isAddedHotelValid}\n                                        onClick={()=>{\n                                    if(!this.validateCreateModel()){\n                                        return;\n                                    }\n                                    this.handleCloseDialog()\n                                    this.onCreate(this.state.hotel)\n                                }} color=\"primary\">\n                                    Gönder\n                                </Button>\n                            )}\n                        />\n                    ) : (\n                        <p></p>\n                    )}\n                </Grid>\n            </LoadingOverlay>\n\n    );\n    }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeActiveResourceCode: bindActionCreators(\n                pageActions.changeActiveResourceCode,\n                dispatch\n            ),\n            executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { CommonTypes } from \"../Types/Common\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport { Card, Grid, Typography } from \"@material-ui/core\";\nimport DataTable from \"./ToolBox/DataTable\";\n\n\nexport class Distributor extends Component {\n\n  columns = [\n    {\n      name: \"number\",\n      label: \"Number\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"distributorName\",\n      label: \"Distributor Name\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"contact\",\n      label: \"Contact\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"phoneNumber\",\n      label: \"Phone Number\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"email\",\n      label: \"Email\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"created At\",\n      label: \"Created At\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"hotelAmount\",\n      label: \"Hotel Amount\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"subordinateDistributor\",\n      label: \"Subordinate Distributor\",\n      options: { filter: true, sort: true },\n    },\n    {\n      name: \"options\",\n      label: \"Options\",\n      options: { filter: true, sort: true },\n    },\n  ];\n\n  componentDidMount() {\n    if (this.props.actions.changeActiveResourceCode) {\n      this.props.actions.changeActiveResourceCode(\n        CommonTypes.Resources.distributor.resourceCode\n      );\n    }\n  }\n\n  render() {\n    return (\n        <Grid container direction=\"column\" spacing={3}>\n          <Grid item>\n            <Typography variant='h4'>\n              Distributor\n            </Typography>\n          </Grid>\n        <Grid item>\n          <Card elevation={1}>\n            <DataTable\n            columns = {this.columns}\n            data={[]}\n            onSelectedItemChange={(\n              currentRowIndex,\n              allRowsIndexes,\n              rowsSelectedIndex\n            )=>{\n              \n            }\n          }\n            ></DataTable>\n          </Card>\n        </Grid>\n          \n      </Grid>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeActiveResourceCode: bindActionCreators(\n        pageActions.changeActiveResourceCode,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Distributor);\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Layout from \"./components/Layout\";\nimport Home from \"./components/Home\";\nimport Distributor from \"./components/Distributor\";\n\nexport default class App extends Component {\n  static displayName = App.name;\n\n  render() {\n    return (\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/distributor\" component={Distributor} />\n        </Switch>\n      </Layout>\n    );\n  }\n}\n","export default class Parameter {\n    ParamType;\n    ParamCode;\n    ParamDescription;\n    ParamValue;\n    ParamValue2;\n    ParamValue3;\n    ParamValue4;\n    ParamValue5;\n}","import Parameter from \"../../Models/Parameter\";\n\nexport default {\n  registerUser: {\n    name: \"redux-test-user-name\",\n    isRegistered: false,\n  },\n  loginUser: {\n    userId: -1,\n    userName: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    token: \"\",\n    expiration: new Date(),\n  },\n  cityList: [\n    {\n      name: \"Seçiniz\",\n      cityId: -1,\n    },\n  ],\n  selectedCityId: -1,\n  countyList: [\n    {\n      name: \"Seçiniz\",\n      countyId: -1,\n    },\n  ],\n  parameterList: [initialParameter()],\n  jwtObject: {\n    token: \"\",\n    expiration: new Date(),\n    isSuccess: false,\n    isNewPassword: false,\n  },\n  messageObject: {\n    messageType: \"\",\n    message: \"\",\n  },\n  actionListInfo: {\n    actionKeyList: [],\n    resourceCode: \"\",\n  },\n  executedAction: {\n    onExecute: () => {\n      alert(\"executed redux function\");\n    },\n  },\n  backDropStatus: false,\n};\n\nfunction initialParameter() {\n  let initialParameter = new Parameter();\n  initialParameter.ParamCode = -1;\n  initialParameter.ParamType = \"no param\";\n  return initialParameter;\n}\n","import { combineReducers } from \"redux\";\nimport loginReducer from \"./login-reducer\";\nimport cityReducer from \"./city-county-reducer\";\nimport countyReducer from \"./county-reducer\";\nimport parameterReducer from \"./parameter-reducer\";\nimport registerReducer from \"./register-reducer\";\nimport changeLoginStatusReducer from \"./change-login-status-reducer\";\nimport showMessageReducer from \"./message-reducer\";\nimport changeSelectedCityReducer from \"./change-selected-city-reducer\";\nimport actionListReducer from \"./actionReducers/action-list-reducer\";\nimport actionExecuteReducer from \"./actionReducers/action-execute-reducer\";\nimport backdropStatusReducer from \"./actionReducers/change-backdrop-status-reducer\";\nimport changeLoginToNewPasswordReducer from \"./change-login-new-password-reducer\";\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  cityReducer,\n  countyReducer,\n  parameterReducer,\n  registerReducer,\n  changeLoginStatusReducer,\n  showMessageReducer,\n  changeSelectedCityReducer,\n  actionListReducer,\n  actionExecuteReducer,\n  backdropStatusReducer,\n  changeLoginToNewPasswordReducer,\n});\n\nexport default rootReducer;\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function loginReducer(state = initialState.loginUser, action) {\n  switch (action.type) {\n    case actionTypes.LOGIN:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function cityReducer(state = initialState.cityList, action) {\n  switch (action.type) {\n    case actionTypes.GETCITYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function countyReducer(state = initialState.countyList, action) {\n  switch (action.type) {\n    case actionTypes.GETCOUNTYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function parameterReducer(\n  state = initialState.parameterList,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.GETPARAMETER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function registerReducer(state = initialState.registerUser, action) {\n  switch (action.type) {\n    case actionTypes.REGISTER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginStatusReducer(\n  state = initialState.jwtObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function showMessageReducer(\n  state = initialState.messageObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.SHOW_STATUS_MESSAGE:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeSelectedCityReducer(\n  state = initialState.selectedCityId,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_SELECTED_CITY_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionListReducer(\n  state = initialState.actionListInfo,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_ACTION_LIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionExecuteReducer(\n  state = initialState.executedAction,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.EXECUTE_ACTION:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function backdropStatusReducer(\n    state = initialState.actionListInfo,\n    action\n) {\n    switch (action.type) {\n        case actionTypes.BACKDROP_STATUS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginToNewPasswordReducer(\n  state = initialState.loginUser,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_NEW_PASSWORD:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport { Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/reducers/configure-store\";\nimport \"alertifyjs/build/css/alertify.css\";\nimport \"react-datasheet-grid/dist/index.css\";\nimport Alertify from \"alertifyjs\";\n\nAlertify.set(\"notifier\", \"position\", \"bottom-center\");\n//import registerServiceWorker from \"./registerServiceWorker\";\n\n//const baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\nconst rootElement = document.getElementById(\"root\");\n\n// optional cofiguration\nconst options = {\n  position: \"bottom center\",\n  timeout: 5000,\n  offset: \"30px\",\n  transition: \"scale\",\n};\n\nconst store = configureStore();\n\nReactDOM.render(\n  <BrowserRouter>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </AlertProvider>\n  </BrowserRouter>,\n  rootElement\n);\n\n//registerServiceWorker();\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./index\";\nimport thunk from \"redux-thunk\";\n\nexport default function configureReducer() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}