{"version":3,"sources":["Types/Messages.js","Types/Common.js","redux/actions/page-actions.js","redux/actions/action-types.js","Core/Helper.js","Services/Cache.js","components/Utils/iconHelper.js","components/Navigation/app-bar.js","components/ToolBox/action.js","components/Navigation/action-bar.js","Models/User.js","Services/HttpClient.js","Core/Response.js","Services/UserService.js","redux/actions/login-actions.js","components/Begin/password-change.js","redux/actions/city-county-actions.js","components/Begin/Login.js","components/Layout.js","components/ToolBox/DataTable.js","components/ToolBox/dialog-form.js","Services/CoreService.js","Services/HotelService.js","Models/hotel/HotelModel.js","components/ToolBox/combo-box.js","components/hotel-add.js","components/Home.js","Services/DeviceService.js","components/DeviceAdd.js","Models/device/DeviceModel.js","components/Device.js","components/User/User.modal.js","components/User/User.screen.js","App.js","Models/Parameter.js","redux/reducers/initial-state.js","redux/reducers/index.js","redux/reducers/login-reducer.js","redux/reducers/city-county-reducer.js","redux/reducers/county-reducer.js","redux/reducers/parameter-reducer.js","redux/reducers/register-reducer.js","redux/reducers/change-login-status-reducer.js","redux/reducers/message-reducer.js","redux/reducers/change-selected-city-reducer.js","redux/reducers/actionReducers/action-list-reducer.js","redux/reducers/actionReducers/action-execute-reducer.js","redux/reducers/actionReducers/change-backdrop-status-reducer.js","redux/reducers/change-login-new-password-reducer.js","index.js","redux/reducers/configure-store.js"],"names":["Messages","PlsLogIn","EMailInputFormText","EMailInvalid","EMailValid","MenuNames","Main","admin","Action","addApartmernOrSite","Other","managment","Titles","defineBlock","ActionNames","refresh","createDistributor","createUser","updateUser","deleteUser","createHotel","createDevice","save","enter","add","getInfo","edit","close","examine","read","delete","LabelNames","name","surname","email","address","zipcode","city","county","recordType","password","floorCount","blockCount","blockName","Warnings","selectRecordType","CouldNotDoProc","Information","Success","Errors","InvalidInformation","AccurredAnError","InvalidMailOrUser","require","CommonTypes","controllerName","actionName","this","URLaddress","concat","trim","WebURLaddress","KafkaHost","KafkaTopic","RabbitMQ","RabbitMQTopicName","MessageTypes","success","error","info","Iconkeys","inbox","personadd","viewlist","howtovote","home","addChart","listChart","paydue","updown","profile","apartment","CacheKeys","CityList","CountyList","ActionKeys","Refresh","CreateDistributor","CreateHotel","CreateUser","DeleteUser","UpdateUser","CreateDevice","DeleteDevice","Save","GetList","Clean","Close","Edit","Examine","Read","AddAgreement","GiveOffer","Divit","ActionTypes","list","giveoffer","Resources","distributor","resourceCode","actionKeys","device","user","ResponseStatusCode","successful","created","accepted","nonAuthoritative","noContent","resetContent","partialContent","clientError","badRequest","unAuthorized","paymentRequired","forbidden","notFound","methodNotAllowed","serverError","InternalServerError","notImplemented","badGateway","serviceUnavailable","gatewayTimeout","httpVersionNotSupported","changeActiveResourceCode","push","apply","dispatch","actionKeyList","type","payload","GetActionListSuccess","executeCommand","onExecute","executeSuccess","changeBackDropStatus","status","changeBackDropSuccess","StringBuilder","IsNullOrEmpty","text","length","IsNullOrEmptyAll","params","GetIntValue","value","parseInt","e","ShowStatusError","message","Alertify","ShowStatusSuccess","LRU","Cache","paramType","key","lru","has","set","get","max","maxAge","getParameter","GetIcon","iconKey","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","spacing","mixins","toolbar","justifyContent","grow","flexGrow","menuButton","marginRight","title","breakpoints","up","content","contentShift","search","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","searchIcon","height","pointerEvents","inputRoot","color","inputInput","paddingLeft","sectionDesktop","sectionMobile","connect","state","userContract","loginReducer","actions","changeBackdropStatus","bindActionCreators","pageActions","props","classes","useState","tmpusr","JSON","parse","localStorage","getItem","console","log","cacheResources","useTheme","openMenu","setOpenMenu","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","onClick","Typography","variant","noWrap","Drawer","anchor","open","paper","direction","Divider","Accordion","AccordionDetails","List","ListItem","button","component","Link","to","ListItemIcon","ListItemText","primary","children","ActionKey","style","Button","size","startIcon","Icon","onExecuteCommand","getActionLabel","propType","ResourceCode","PropTypes","string","isRequired","actionExecuteReducer","ActionBar","getIcon","generateActions","actionListInfo","map","index","alert","Component","actionListReducer","User","userType","hotelId","HttpClientServiceInstance","setTokenOnLogin","token","axiosInstance","defaults","headers","Authorization","clearTokenOnLogout","removeItem","axios","baseURL","url","then","resp","Promise","resolve","catch","undefined","response","reject","window","location","replace","data","post","put","res","Response","addResult","severity","errorCode","results","Result","getResultsStringFormat","result","ErrorMessage","appendLine","toString","errorMessage","code","ErrorCode","Severity","contract","GetUrlForAPI","accessToken","shouldNewPassword","expriation","expiration","addCoreResults","ForgotPassword","ro","err","SetNewPassword","AddUser","GetUsers","returnObject","LoginSuccess","ChangeLoginStatusSuccess","isSuccess","isNewPassword","ChangeLoginStatus","jwtObject","Login","LoginUser","Date","PasswordChange","onSubmitForm","newPassword","newPassword2","changeStatus","changeLoginStatus","Grid","container","item","xs","TextField","label","required","onChange","setState","target","loginJwtObject","changeLoginStatusReducer","loginActions","getCityList","getCountyListSuccess","stringify","countylist","loginUserContract","onForgotPassword","dataContract","Email","isForgotPassword","validate","emailState","Password","test","alignContent","Form","Col","FormGroup","Label","Input","valid","invalid","id","autoComplete","placeholder","datac","onBlur","validateEmail","FormFeedback","for","disabled","FormControlLabel","control","Checkbox","checked","loginUser","cityActions","Container","maxWidth","Card","CardActions","CardContent","loginControl","DataTable","options","filterType","onRowSelectionChange","onSelectedItemChange","selectableRows","selectableRowsOnClick","columns","DialogTitle","withStyles","margin","closeButton","right","top","grey","onClose","other","disableTypography","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DialogForm","React","setOpen","handleClose","Dialog","fullWidth","aria-labelledby","dividers","autoFocus","GetCountryList","returnData","countryList","constantValue","constantCode","GetHotels","SaveHotel","model","UpdateHotel","HotelModel","allowGeneralCard","contactType","accessCard","accessEkey","accessPasscode","ComboBox","defaultValue","dataList","itemSource","selectedValue","isDisable","tempList","tlst","find","val","prevProps","prevState","snapshot","splice","filter","Autocomplete","getOptionLabel","option","renderInput","reason","HotelAdd","validateAndSetHotel","hotel","validSectors","hotelName","hotelAdminName","hotelAdminMail","mobileNumber","hotelCode","countryCode","mobileCountryCode","setHotel","renderCount","isUpdate","hotelModel","isLoading","defaultCountry","validation","isValid","helperText","country","CardHeader","avatar","Avatar","subheader","md","dialogGridMdSize","validObj","defaultChecked","event","accessEKey","defaultProps","array","func","bool","object","Home","sort","onLoad","getCountries","all","getList","dialogContent","isOpenDialogForm","isOpenDialogForUpdate","selectedHotel","onCreate","hotelContract","onUpdate","handleCloseDialog","handleOpenDialog","validateCreateModel","isAddedHotelValid","hotelList","active","spinner","elevation","currentRowIndex","allRowsIndexes","rowsSelectedIndex","selectedData","count","displayName","GetDevices","SaveDevice","deviceModel","DeviceAdd","validateAndSetDevice","uniqueCode","deviceTypeCd","setDevice","defaultHotel","DeviceModel","DeviceComponent","getHotels","selectedDevice","brasscoDeviceId","hotels","deviceContract","onDelete","isAddedDeviceValid","deviceList","UserAdd","validateAndSetUser","fullName","setUser","userModel","AccountCircleRounded","UserScreen","selectedUser","userId","isAddedUserValid","userList","App","exact","path","Parameter","registerUser","isRegistered","userName","firstName","lastName","cityList","cityId","selectedCityId","countyList","countyId","parameterList","initialParameter","ParamCode","ParamType","messageObject","messageType","executedAction","backDropStatus","rootReducer","combineReducers","initialState","action","cityReducer","countyReducer","parameterReducer","registerReducer","showMessageReducer","changeSelectedCityReducer","backdropStatusReducer","changeLoginToNewPasswordReducer","rootElement","document","getElementById","store","createStore","applyMiddleware","thunk","ReactDOM","render","template","AlertTemplate","timeout","offset"],"mappings":"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","file":"static/js/main.b6dc5cf3.chunk.js","sourcesContent":["export default class Messages {\n  static PlsLogIn = \"Merhaba. Lütfen giriş yapınız...\";\n  static EMailInputFormText = \"Geçerli ve aktif bir mail adresi giriniz.\";\n  static EMailInvalid = \"Geçersiz mail adresi.\";\n  static EMailValid = \"\";\n\n  static MenuNames = {\n    Main: {\n      admin: \"Admin\",\n    },\n    Action: {\n      addApartmernOrSite: \"Site/Aparman ekle\",\n    },\n    Other: {\n      managment: \"Yönetim\",\n    },\n  };\n\n  static Titles = {\n    defineBlock: \"Blok ekleme\",\n  };\n\n  static ActionNames = {\n    /**refresh */\n    refresh:\"Refresh\",\n    /** distributor kaydet */\n    createDistributor: \"Create distributor\",\n    /** create user */\n    createUser: \"Create User\",\n    /** update user */\n    updateUser: \"Update User\",\n    /** delete user */\n    deleteUser: \"Delete User\",\n    /** otel ekle */\n    createHotel: \"Create Hotel\",\n    /** cihaz ekle */\n    createDevice: \"Create Device\",\n    /**kaydet */\n    save: \"Kaydet\",\n    /**giriş yap */\n    enter: \"Giriş Yap\",\n    /**ekle */\n    add: \"Ekle\",\n    /** bilgi getir, listele*/\n    getInfo:\"Bilgi Getir\",\n    /* güncelle */\n    edit:\"Güncelle\",\n    /* kapat */\n    close:\"Kapat\",\n    /* İncele */\n    examine:\"İncele\",\n    /* Oku */\n    read:\"Oku\",\n    /* sil */\n    delete:\"Sil\",\n  };\n\n  static LabelNames = {\n    name: \"Adınız\",\n    surname: \"Soyadınız\",\n    email: \"Mail Adresiniz\",\n    address: \"Adres\",\n    zipcode: \"Posta Kodu\",\n    city: \"İl\",\n    county: \"İlçe\",\n    recordType: \"Kayıt Türü\",\n    password: \"Parola\",\n    floorCount: \"Kat Sayısı\",\n    blockCount: \"Blok Sayısı\",\n    blockName: \"Blok Adı\",\n  };\n\n  static Warnings = {\n    selectRecordType: \"Kayıt Türünü Seçiniz..\",\n    /**işlem başarısız oldu. */\n    CouldNotDoProc: \"İşlem başarısız.\",\n  };\n\n  static Information = {\n    /**\n     * işlem başarılı\n     */\n    Success: \"İşlem Başarılı.\",\n  };\n\n  static Errors = {\n    InvalidInformation: \"Eksik veya hatalı bilgi girdiniz.\",\n    /**hata oluştu mesajı */\n    AccurredAnError: \"İşlem yapılırken hata meydana geldi.\",\n    /**\n     * geçersiz mail veya parola\n     */\n    InvalidMailOrUser: \"Geçersiz mail adresi veya parola..\",\n  };\n}\n","import Messages from \"./Messages\";\nconst dateFormat = require(\"dateformat\");\n\n/**\n * common types for general components\n */\nexport class CommonTypes {\n  static URLaddress = \"https://srv341.heyloki.com:5011\"; //23163 - api, 5001gateway\n  static WebURLaddress = \"http://srv341.heyloki.com:8000\";\n  static KafkaHost = \"http://167.172.180.44:9092\";\n  static KafkaTopic = \"apmantest\";\n  static RabbitMQ = \"http://167.172.180.44:5672\";\n  static RabbitMQTopicName = \"apman-client\";\n\n  /**\n   *\n   * @param {string} controllerName\n   * @param {string} actionName\n   */\n  static GetUrlForAPI(controllerName, actionName) {\n    return this.URLaddress.concat(\n      \"/api/\",\n      controllerName.trim(),\n      \"/\",\n      actionName.trim()\n    );\n  }\n\n  static MessageTypes = {\n    success: \"success\",\n    error: \"error\",\n    info: \"info\",\n  };\n\n  /**\n   * the icon keys\n   * @type {{viewlist: string, personadd: string, inbox: string, howtovote: string}}\n   */\n  static Iconkeys = {\n    inbox: \"inbox\",\n    personadd: \"personadd\",\n    viewlist: \"viewlist\",\n    howtovote: \"howtovote\",\n    home: \"home\",\n    addChart: \"addchart\",\n    listChart: \"listchart\",\n    paydue: \"paydue\",\n    updown: \"updown\",\n    profile: \"profile\",\n    apartment: \"apartment\",\n    refresh:\"refresh\"\n  };\n\n  /**\n   * cache keyleri tutulur.\n   */\n  static CacheKeys = {\n    CityList: \"CITYLIST\",\n    CountyList: \"COUNTYLIST\",\n  };\n\n  /**\n   * aksiyon isimleri\n   */\n  static ActionKeys = {\n    /**refresh */\n    Refresh:\"REFRESH\",\n    /** create distributor */\n    CreateDistributor:\"CREATEDIST\",\n    /** create a hotel */\n    CreateHotel:\"CREATEHOTEL\",\n    /** create user */\n    CreateUser:\"CREATEUSER\",\n    /** delete user */\n    DeleteUser:\"DELETEUSER\",\n    /** update user */\n    UpdateUser:\"UPDATEUSER\",\n    /** create a device */\n    CreateDevice:\"CREATEDEVICE\",\n    /** delete device */\n    DeleteDevice:\"DELETEDEVICE\",\n    /**\n     * kaydet\n     */\n    Save: \"SAVE\",\n    /**\n     * bilgi getir (listele)\n     * GETLIST\n     */\n    GetList: \"GETLIST\",\n    /**\n     * Temizle\n     */\n    Clean: \"CLEAN\",\n    /**\n     * kapat\n     */\n    Close: \"CLOSE\",\n    /**\n     * düzenle / güncelle\n     */\n    Edit: \"EDIT\",\n    /**\n     * incele / ayrıntı\n     */\n    Examine: \"EXAMINE\",\n    /* Oku */\n    Read: \"READ\",\n    /* sözleşme ekle */\n    AddAgreement: \"ADDAGR\",\n    /*teklif ver */\n    GiveOffer: \"GVOFFR\",\n    /**döküman ekle */\n    Divit: \"DIVIT\",\n  };\n\n  /**\n   * aksiyon tiplerini tutar.\n   */\n  static ActionTypes = {\n    save: \"save\",\n    add: \"add\",\n    delete: \"delete\",\n    info: \"info\",\n    close: \"close\",\n    list: \"list\",\n    read: \"read\",\n    examine: \"examine\",\n    giveoffer: \"giveoffer\",\n    edit:\"edit\"\n  };\n\n  /**\n   * kaynak tanımları\n   */\n  static Resources = {\n    /**\n     * distributor\n     */\n    distributor:{\n      resourceCode:\"DISTR\",\n      actionKeys:[\n        CommonTypes.ActionKeys.CreateDistributor,\n        CommonTypes.ActionKeys.Refresh\n      ]\n    },\n    /**\n     * home\n     */\n    home: {\n      resourceCode: \"HOME\",\n      actionKeys: [\n        CommonTypes.ActionKeys.CreateHotel,\n        CommonTypes.ActionKeys.Refresh,\n        CommonTypes.ActionKeys.Edit\n      ],\n    },\n    /**\n     * device\n     */\n         device: {\n          resourceCode: \"DEVICE\",\n          actionKeys: [\n            CommonTypes.ActionKeys.CreateDevice,\n            CommonTypes.ActionKeys.Refresh,\n            CommonTypes.ActionKeys.DeleteDevice\n          ],\n        },\n        /**\n         * user\n         */\n        user:{\n          resourceCode:\"USER\",\n          actionKeys:[\n            CommonTypes.ActionKeys.Refresh,\n            CommonTypes.ActionKeys.CreateUser,\n            CommonTypes.ActionKeys.UpdateUser,\n            // CommonTypes.ActionKeys.DeleteUser,\n          ]\n        }\n   \n  };\n\n  /**\n   * http response status code\n   */\n  static ResponseStatusCode = {\n    successful: {\n      success: 200,\n      created: 201,\n      accepted: 202,\n      nonAuthoritative: 203,\n      noContent: 204,\n      resetContent: 205,\n      partialContent: 206,\n    },\n    clientError: {\n      badRequest: 400,\n      unAuthorized: 401,\n      paymentRequired: 402,\n      forbidden: 403,\n      notFound: 404,\n      methodNotAllowed: 405,\n    },\n    serverError: {\n      InternalServerError: 500,\n      notImplemented: 501,\n      badGateway: 502,\n      serviceUnavailable: 503,\n      gatewayTimeout: 504,\n      httpVersionNotSupported: 505,\n    },\n  };\n}\n\n/**\n * aksiyon ismini verir\n * @param key\n * @returns {string}\n */\nexport function getActionLabel(key) {\n  switch (key) {\n    case CommonTypes.ActionKeys.CreateDistributor:\n      return Messages.ActionNames.createDistributor;\n      case CommonTypes.ActionKeys.CreateHotel:\n        return Messages.ActionNames.createHotel;\n    case CommonTypes.ActionKeys.Save:\n      return Messages.ActionNames.save;\n    case CommonTypes.ActionKeys.GetList:\n      return Messages.ActionNames.getInfo;\n    case CommonTypes.ActionKeys.Edit:\n      return Messages.ActionNames.edit;\n    case CommonTypes.ActionKeys.Close:\n      return Messages.ActionNames.close;\n    case CommonTypes.ActionKeys.Examine:\n      return Messages.ActionNames.examine;\n    case CommonTypes.ActionKeys.Read:\n      return Messages.ActionNames.read;\n    case CommonTypes.ActionKeys.Refresh:\n      return Messages.ActionNames.refresh;\n    case CommonTypes.ActionKeys.CreateDevice:\n      return Messages.ActionNames.createDevice;  \n    case CommonTypes.ActionKeys.DeleteDevice:\n      return Messages.ActionNames.delete;  \n      case CommonTypes.ActionKeys.CreateUser:\n        return Messages.ActionNames.createUser;  \n      case CommonTypes.ActionKeys.UpdateUser:\n        return Messages.ActionNames.updateUser;  \n      case CommonTypes.ActionKeys.DeleteUser:\n        return Messages.ActionNames.delete;  \n  \n    default:\n      return \"action\";\n  }\n}\n\n/**\n * yyyy-mm-dd tarih verir.\n * @returns {*}\n */\nexport function getDateIsoDate() {\n  return dateFormat(new Date(), \"isoDate\");\n}\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\n\n//#region get actions\n\n/**\n * aksiyon listesi getirilir.\n * @param {string} resourceCode ekran kodu\n */\nexport function changeActiveResourceCode(resourceCode) {\n  let actionKeys = [];\n  // LogMessage(\"test message\");\n  switch (resourceCode) {\n    // home\n    case CommonTypes.Resources.home.resourceCode:\n      actionKeys.push.apply(actionKeys, CommonTypes.Resources.home.actionKeys);\n      break;\n    case CommonTypes.Resources.distributor.resourceCode:\n      actionKeys.push.apply(actionKeys, CommonTypes.Resources.distributor.actionKeys);\n      break;\n      case CommonTypes.Resources.device.resourceCode:\n        actionKeys.push.apply(actionKeys, CommonTypes.Resources.device.actionKeys);\n        break;\n        case CommonTypes.Resources.user.resourceCode:\n          actionKeys.push.apply(actionKeys, CommonTypes.Resources.user.actionKeys);\n          break;\n    default:\n      break;\n  }\n\n  return function (dispatch) {\n    dispatch(GetActionListSuccess(actionKeys, resourceCode));\n  };\n}\n\nexport function GetActionListSuccess(actionKeyList, resourceCode) {\n  return {\n    type: actionTypes.CHANGE_ACTION_LIST,\n    payload: { actionKeyList, resourceCode },\n  };\n}\n\n//#endregion\n\n//#region execute action\n\n/**\n * on execute action\n * @param {func} onExecute (key)\n */\nexport function executeCommand(onExecute) {\n  return function (dispatch) {\n    dispatch(executeSuccess(onExecute));\n  };\n}\n\nexport function executeSuccess(onExecute) {\n  return {\n    type: actionTypes.EXECUTE_ACTION,\n    payload: {\n      onExecute,\n    },\n  };\n}\n\n//#endregion\n\n//#region backdrop\n\nexport function changeBackDropStatus(status) {\n  return function (dispatch) {\n    return dispatch(changeBackDropSuccess(status));\n  };\n}\n\nexport function changeBackDropSuccess(status) {\n  return {\n    type: actionTypes.BACKDROP_STATUS,\n    payload: status,\n  };\n}\n//#endregion\n","export const LOGIN = \"LOGIN\";\nexport const REGISTER = \"REGISTER\";\nexport const GETCITYLIST = \"GETCITYLIST\";\nexport const GETCOUNTYLIST = \"GETCOUNTYLIST\";\nexport const GETPARAMETER = \"GETPARAMETER\";\nexport const CHANGE_LOGIN_STATUS = \"CHANGE_LOGIN_STATUS\";\nexport const SHOW_STATUS_MESSAGE = \"SHOW_STATUS_MESSAGE\";\nexport const CHANGE_SELECTED_CITY_ID = \"CHANGE_SELECTED_CITY_ID\";\nexport const CHANGE_ACTION_LIST = \"CHANGE_ACTION_LIST\";\nexport const EXECUTE_ACTION = \"EXECUTE_ACTION\";\nexport const BACKDROP_STATUS = \"BACKDROP_STATUS\";\nexport const CHANGE_LOGIN_NEW_PASSWORD = \"CHANGE_LOGIN_NEW_PASSWORD\";\n","import { getDateIsoDate } from \"../Types/Common\";\nimport Alertify from \"alertifyjs\";\n\nexport const StringBuilder = require(\"string-builder\");\n\n/**\n * metin değerlerinin doluluğunu kontrol eder.\n * undefined veya boş ise true döner.\n * @param {string} text kontrol edilecek metin\n */\nexport function IsNullOrEmpty(text) {\n  return !(text && text.length > 0);\n}\n/**\n * array içerisindeki elemanların null kontrolü yapılır.\n * @param {Array} params\n */\nexport function IsNullOrEmptyAll(params) {\n  if (params && params.length > 0) {\n    for (const item of params) {\n      if (IsNullOrEmpty(item)) return true;\n    }\n    return false;\n  }\n  return false;\n}\n\n/**\n * obj eğer geçerli bir obje ise true döner.\n * @param obj\n * @returns {boolean}\n * @constructor\n */\nexport function IsValidObject(obj) {\n  return !!(obj && typeof obj === \"object\");\n}\n\n/**\n * girilen değer geçersiz ise -1 döner.\n * geçerli ise değeri int oalarak döner\n * @param value\n * @returns {number}\n * @constructor\n */\nexport function GetIntValue(value) {\n  if (value && typeof value === \"number\") {\n    return parseInt(value);\n  }\n  if (value && typeof value === \"string\") {\n    let val = -1;\n    try {\n      val = parseInt(value);\n      return val;\n    } catch (e) {\n      return -1;\n    }\n  } else return -1;\n}\n\n/**\n * tarih kontrolü yapar.\n * eğer bugünden küçük veya geçersiz ise false döner.\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function DateControlOlderToday(value) {\n  // eslint-disable-next-line valid-typeof\n  if (value && typeof value === \"date\") {\n    let date = getDateIsoDate();\n    return value >= date;\n  }\n  return false;\n}\n\n/**\n * eğer item1 < item2 ise ve tarihler geçerli ise true döner\n * @param item1\n * @param item2\n * @returns {boolean}\n * @constructor\n */\nexport function IsBiggerDate(item1, item2) {\n  // eslint-disable-next-line valid-typeof\n  if (item1 && typeof item1 === \"date\" && item2 && typeof item2 === \"date\") {\n    return item1 <= item2;\n  }\n  return false;\n}\n\n/**\n * bir ay öncesini verir\n * @param date {Date}\n * @returns {Date}\n * @constructor\n */\nexport function GetOneMonthAgo(date = new Date()){\n  \n  if(date.getMonth() === 0){\n    var year = date.getFullYear()-1;\n    date.setFullYear(year);\n    date.setMonth(11);\n  }else{\n    var month = date.getMonth()-1;\n    date.setMonth(month);\n  }\n  return date;\n}\n\n/**\n * is value -1 ? true:\n * @param value\n * @returns {boolean}\n * @constructor\n */\nexport function IsInvalidIndex(value) {\n  return value === -1;\n}\n\n/**\n * returned login user\n * @returns {User}\n * @constructor\n */\nexport function GetActiveLocalUser() {\n  return JSON.parse(localStorage.getItem(\"user\" || {}));\n}\n\n/**\n * returned message\n * @param propertyName\n * @constructor\n */\nexport function GetMessage(propertyName) {\n  if (propertyName) {\n    //mesaj servisi oluşturulacak.\n  }\n}\n\n//#region status messages\n\n/**\n * status'ta hata mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusError(message) {\n  Alertify.error(message);\n}\n/**\n * status'ta bilgi mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusInfo(message) {\n  Alertify.notify(message);\n}\n/**\n * status'ta başarılı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusSuccess(message) {\n  Alertify.success(message);\n}\n/**\n * status'ta uyarı mesajı gösterir.\n * @param message\n * @constructor\n */\nexport function ShowStatusWarning(message) {\n  Alertify.warning(message);\n}\n//#endregion\n","const LRU = require(\"lru-cache\");\n\nexport default class Cache {\n  static lru = new LRU({ max: 100, maxAge: 1000 * 60 * 60 * 24 });\n\n  static getParameter = (paramType) => {\n    let key = \"prm_\" + paramType;\n    if (Cache.lru.has(key)) {\n      return Cache.lru.get(key);\n    } else {\n      return undefined;\n    }\n  };\n\n  static setParameter(paramType, value) {\n    let key = \"prm_\" + paramType;\n    if (!Cache.lru.has(key)) {\n      return Cache.lru.set(key, value);\n    } else {\n      return 0;\n    }\n  }\n  \n  static setItem(key,value){\n    if (!Cache.lru.has(key)){\n      return Cache.lru.set(key, value);\n    }else {\n      return 0;\n    }\n  }\n\n  /**\n   * daha önce varsa üzerine yaz\n   * @param key\n   * @param value\n   * @returns {boolean}\n   */\n  static overrideItem(key,value){\n      return Cache.lru.set(key, value);\n  }\n  \n  static getItem(key){\n    return Cache.lru.get(key);\n  }\n}\n","import InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport ViewListRoundedIcon from \"@material-ui/icons/ViewListRounded\";\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\nimport HowToVoteRoundedIcon from \"@material-ui/icons/HowToVoteRounded\";\nimport HomeIcon from \"@material-ui/icons/HomeRounded\";\nimport AddBox from \"@material-ui/icons/AddBoxRounded\";\nimport ListAltRoundedIcon from \"@material-ui/icons/ListAltRounded\"; // ihale listele\n//import ReceiptRoundedIcon from \"@material-ui/icons/ReceiptRounded\"; //aidat ödeme\nimport ThumbsUpDownRoundedIcon from \"@material-ui/icons/ThumbsUpDownRounded\";\nimport ProfileIcon from \"@material-ui/icons/AccountBoxRounded\";\nimport ApartmentRoundedIcon from \"@material-ui/icons/ApartmentRounded\";\nimport PaymentIcon from \"@material-ui/icons/Payment\";\n\nimport { CommonTypes } from \"../../Types/Common\";\nimport React from \"react\";\n\nexport default function GetIcon(iconKey) {\n  switch (iconKey) {\n    case CommonTypes.Iconkeys.inbox:\n      return <InboxIcon />;\n    case CommonTypes.Iconkeys.viewlist:\n      return <ViewListRoundedIcon />;\n    case CommonTypes.Iconkeys.personadd:\n      return <PersonAddIcon />;\n    case CommonTypes.Iconkeys.howtovote:\n      return <HowToVoteRoundedIcon />;\n    case CommonTypes.Iconkeys.home:\n      return <HomeIcon />;\n    case CommonTypes.Iconkeys.addChart:\n      return <AddBox />;\n    case CommonTypes.Iconkeys.listChart:\n      return <ListAltRoundedIcon />;\n    case CommonTypes.Iconkeys.paydue:\n      return <PaymentIcon />;\n    case CommonTypes.Iconkeys.updown:\n      return <ThumbsUpDownRoundedIcon />;\n    case CommonTypes.Iconkeys.profile:\n      return <ProfileIcon />;\n    case CommonTypes.Iconkeys.apartment:\n      return <ApartmentRoundedIcon />;\n    default:\n      return <InboxIcon />;\n  }\n}\n","//#region imports\nimport React, { useState } from \"react\";\n//import { Route } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport clsx from \"clsx\";\nimport { alpha, makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport List from \"@material-ui/core/List\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Accordion from \"@material-ui/core/Accordion\";\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { GetActiveLocalUser } from \"../../Core/Helper\";\nimport Cache from \"../../Services/Cache\";\nimport GetIcon from \"../Utils/iconHelper\";\nimport { CommonTypes } from \"../../Types/Common\";\n\n//#endregion\nlet drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  hide: {\n    display: \"none\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\",\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    display: \"none\",\n    [theme.breakpoints.up(\"sm\")]: {\n      display: \"block\",\n    },\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n  search: {\n    position: \"relative\",\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\n    \"&:hover\": {\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: \"100%\",\n    [theme.breakpoints.up(\"sm\")]: {\n      marginLeft: theme.spacing(3),\n      width: \"auto\",\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  inputRoot: {\n    color: \"inherit\",\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create(\"width\"),\n    width: \"100%\",\n    [theme.breakpoints.up(\"md\")]: {\n      width: \"20ch\",\n    },\n  },\n  sectionDesktop: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n  },\n  sectionMobile: {\n    display: \"flex\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"none\",\n    },\n  },\n}));\n\n/**\n * uygulama çerçevesini oluşturur.\n * @param props\n * @returns {*}\n * @constructor\n */\nfunction AppBarMenu(props) {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = useState(null);\n\n  //initial user\n\n  let tmpusr = GetActiveLocalUser();\n  console.log(\"app-bar kullanıcı = \", tmpusr);\n\n  let cacheResources = Cache.getItem(\"resources\");\n  console.log(\"kaynak listesi (cache) = \", cacheResources);\n\n  //drawer\n  const theme = useTheme();\n  const [openMenu, setOpenMenu] = useState(false);\n  // eslint-disable-next-line\n  const [inboxNotifCount, setInboxNotifCount] = useState(0);\n  // eslint-disable-next-line\n  const [generalNotifCount, setGeneralNotifCount] = useState(0);\n\n  const handleDrawerOpen = () => {\n    setOpenMenu(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpenMenu(false);\n  };\n  //#region handles\n\n  //#endregion\n\n  //#region renders\n\n  //#endregion\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: openMenu,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={clsx(classes.menuButton, openMenu && classes.hide)}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h5\" noWrap>\n            ARTES CLOUD\n          </Typography>\n          <div className={classes.grow} />\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={openMenu}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === \"ltr\" ? (\n              <ChevronLeftIcon />\n            ) : (\n              <ChevronRightIcon />\n            )}\n          </IconButton>\n        </div>\n        <Divider />\n        <Accordion>\n          <AccordionDetails>\n            <List>\n              <ListItem button component={Link} to={\"/\"}>\n                <ListItemIcon>{GetIcon(\"home\")}</ListItemIcon>\n                <ListItemText primary={\"Home\"} />\n              </ListItem>\n              <ListItem button component={Link} to={\"/device\"}>\n              <ListItemIcon>{GetIcon(CommonTypes.Iconkeys.paydue)}</ListItemIcon>\n                <ListItemText primary={\"Device\"} />\n              </ListItem>\n              <ListItem button component={Link} to={\"/user\"}>\n              <ListItemIcon>{GetIcon(CommonTypes.Iconkeys.profile)}</ListItemIcon>\n                <ListItemText primary={\"User\"} />\n              </ListItem>\n            </List>\n          </AccordionDetails>\n        </Accordion>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: openMenu,\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        {props.children}\n      </main>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeBackdropStatus: bindActionCreators(\n        pageActions.changeBackDropStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBarMenu);\n","import { Button } from \"@material-ui/core\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport { bindActionCreators } from \"redux\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport { CommonTypes, getActionLabel } from \"../../Types/Common\";\n\n/**\n * action bar için aksiyon döndürür.\n * executeCommand() aksiyon tetikler.\n * @param {props} props (key,icon,text)\n */\nconst Action = (props) => {\n  let key = props.ActionKey;\n\n  console.log(\"key: \", key);\n  return (\n    <div style={{ display: \"inline-block\", marginLeft: \"15px\" }}>\n      {key ? (\n        <Button\n          variant=\"contained\"\n          color={key === CommonTypes.ActionKeys.Close ? \"secondary\" : \"primary\"}\n          size=\"small\"\n          startIcon={props.Icon ? props.Icon : <InfoIcon />}\n          onClick={(e) => {\n            if (props.onExecuteCommand && props.onExecuteCommand.onExecute)\n              props.onExecuteCommand.onExecute(key);\n          }}\n        >\n          {getActionLabel(key)}\n        </Button>\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n};\n\nAction.propType = {\n  ResourceCode: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  onExecuteCommand: state.actionExecuteReducer,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    actions: {\n      executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Action);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Action from \"../ToolBox/action\";\nimport { CommonTypes } from \"../../Types/Common\";\n\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport CreateIcon from \"@material-ui/icons/Create\"; //düzenle\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\"; //kapat\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\"; // temizle\nimport ImportContactsRoundedIcon from \"@material-ui/icons/ImportContactsRounded\"; // oku\nimport FindInPageOutlinedIcon from \"@material-ui/icons/FindInPageOutlined\"; // incele\nimport PostAddRoundedIcon from \"@material-ui/icons/PostAddRounded\"; // sözleşme ekle\nimport AttachFileRoundedIcon from \"@material-ui/icons/AttachFileRounded\"; // döküman\nimport RefreshRoundedIcon from '@material-ui/icons/RefreshRounded'; // yenile\nimport DeleteOutlineRounded from '@material-ui/icons/DeleteOutlineRounded'; // yenile\n\nclass ActionBar extends Component {\n  getIcon = (key) => {\n    switch (key) {\n      case CommonTypes.ActionKeys.CreateDistributor:\n        return <SaveIcon/>\n      case CommonTypes.ActionKeys.CreateHotel:\n        return <SaveIcon/>\n      case CommonTypes.ActionKeys.CreateDevice:\n        return <SaveIcon/>  \n        case CommonTypes.ActionKeys.DeleteDevice:\n        return <DeleteOutlineRounded/>  \n        \n      case CommonTypes.ActionKeys.CreateUser:\n        return <SaveIcon/>  \n      case CommonTypes.ActionKeys.UpdateUser:\n        return <CreateIcon/>  \n      case CommonTypes.ActionKeys.DeleteUser:\n        return <DeleteOutlineRounded/>  \n\n      case CommonTypes.ActionKeys.Save:\n        return <SaveIcon />;\n      case CommonTypes.ActionKeys.GetList:\n        return <ListIcon />;\n      case CommonTypes.ActionKeys.Clean:\n        return <InsertDriveFileIcon />;\n      case CommonTypes.ActionKeys.Edit:\n        return <CreateIcon />;\n      case CommonTypes.ActionKeys.Close:\n        return <PowerSettingsNewIcon />;\n      case CommonTypes.ActionKeys.Read:\n        return <ImportContactsRoundedIcon />;\n      case CommonTypes.ActionKeys.Examine:\n        return <FindInPageOutlinedIcon />;\n      case CommonTypes.ActionKeys.AddAgreement:\n        return <PostAddRoundedIcon />;\n      case CommonTypes.ActionKeys.Divit:\n        return <AttachFileRoundedIcon />;\n      case CommonTypes.ActionKeys.Refresh:\n        return <RefreshRoundedIcon/>;\n\n      default:\n        break;\n    }\n  };\n\n  static executeCommand(key) {\n    alert(\"no event. key:\" + key);\n    return;\n  }\n\n  generateActions = () => {\n    if (\n      this.props.actionListInfo &&\n      this.props.actionListInfo.actionKeyList &&\n      this.props.actionListInfo.actionKeyList.length > 0\n    ) {\n      let rtnObj = this.props.actionListInfo.actionKeyList.map(\n        (value, index) => {\n          return (\n            <Action\n              key={index + \"apbar\"}\n              ActionKey={value}\n              Icon={this.getIcon(value)}\n              ResourceCode={this.props.actionListInfo.resourceCode}\n              executeCommand\n              onExecuteCommand={ActionBar.executeCommand}\n            />\n          );\n        }\n      );\n\n      return rtnObj;\n    }\n  };\n\n  render() {\n    return <div>{this.generateActions()}</div>;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    actionListInfo: state.actionListReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {},\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionBar);\n","export default class User {\n  userId;\n  userName;\n  email;\n  firstName;\n  lastName;\n  password;\n  MemberId;\n  token;\n  expiration;\n  fullName;\n  status = true;\n  userType=2;\n  hotelId=1;\n}\n\nexport class Subscription {\n  subscriptionId;\n  userId;\n  startDate;\n  endDate;\n  memberLimit;\n  apartmentLimit;\n}\n","import axios from \"axios\";\nimport { CommonTypes } from \"../Types/Common\";\n\nclass HttpClientService {\n  constructor() {\n    localStorage.removeItem(\"user\");\n\n    const token = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance = axios.create({\n      baseURL: \"/\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n  }\n\n  get(url) {\n    return this.axiosInstance\n      .get(url)\n      .then((resp) => {\n        return Promise.resolve(resp);\n      })\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          localStorage.removeItem(\"user\");\n          window.location.replace(\"http://192.168.10.10:5012\");\n        } else {\n          return Promise.reject(resp);\n        }\n      });\n  }\n\n  post(url, data) {\n    return this.axiosInstance\n      .post(url, data)\n      .then((resp) => {\n        return Promise.resolve(resp);\n      })\n      .catch((resp) => {\n        if (resp.response !== undefined && resp.response.status === 401) {\n          alert(\"unauthorized!!\");\n          localStorage.removeItem(\"user\");\n          window.location.replace(CommonTypes.WebURLaddress);\n        }\n        return Promise.reject(resp);\n      });\n  }\n\n  put(url,data){\n    return this.axiosInstance\n    .put(url,data)\n    .then( res => {\n      return Promise.resolve(res);\n    })\n    .catch( resp => {\n      if (resp.response !== undefined && resp.response.status === 401) {\n        alert(\"unauthorized!!\");\n        localStorage.removeItem(\"user\");\n        window.location.replace(CommonTypes.WebURLaddress);\n      }\n      return Promise.reject(resp);\n    })\n  }\n\n  delete(url,data){\n    return this.axiosInstance\n    .delete(url,data)\n    .then( res => {\n      return Promise.resolve(res);\n    })\n    .catch( resp => {\n      if (resp.response !== undefined && resp.response.status === 401) {\n        alert(\"unauthorized!!\");\n        localStorage.removeItem(\"user\");\n        window.location.replace(CommonTypes.WebURLaddress);\n      }\n      return Promise.reject(resp);\n    })\n  }\n\n  setTokenOnLogin = (token = \"\") => {\n    // const tokens = JSON.parse(localStorage.getItem(\"user\") || \"{}\")[\"token\"];\n    this.axiosInstance.defaults.headers = { Authorization: `Bearer ${token}` };\n  };\n  clearTokenOnLogout = () => {\n    localStorage.removeItem(\"user\");\n    this.axiosInstance.defaults.headers = {};\n  };\n}\n\nexport const HttpClientServiceInstance = new HttpClientService();\n","/**\n * Response class for the all responses\n */\nimport {StringBuilder} from \"./Helper\";\n\n/**\n * genel response yapısıdır.\n */\nexport class Response {\n    constructor() {\n        this.success = true;\n        this.value = {};\n        this.results = [];\n    }\n\n    /**\n     * hata ekler\n     * @param message {string}\n     * @param severity {number}\n     * @param errorCode {string}\n     */\n    addResult = (message, severity, errorCode = \"no code\") => {\n        //todo severity bilgisine göre log işlenecek..\n        console.log(\"pushed error result:\",message);\n        if (message && message.length > 0) {\n            this.results.push(new Result(errorCode, message, severity))\n            if (this.results.length > 0) {\n                this.success = false;\n            }\n        }\n    }\n\n    /**\n     * api tarafından gelen resultları alır.\n     * @param results\n     */\n    addCoreResults(results){\n        for (let result of results) {\n            this.addResult(result.errorMessage,result.severity,result.errorCode );\n        }\n    }\n    /**\n     * getting string formatted.\n     * @returns {string}\n     */\n    getResultsStringFormat = () => {\n        let string = new StringBuilder();\n\n        if (this.results.length > 0) {\n            for (let result of this.results) {\n                if (result.ErrorMessage.length > 1)\n                    string.appendLine(result.ErrorMessage);\n            }\n        }\n        return string.toString();\n    }\n}\n\n/**\n * the result\n */\nclass Result {\n    constructor(code, message, severity) {\n        this.ErrorCode = code;\n        this.ErrorMessage = message;\n        this.Severity = severity;\n    }\n}\n\n/**\n * the severity\n * hata seviyeleri\n */\nexport const Severity = {\n    /**\n     * düşük derecede hata (kullanıcı hatası, geçersiz input değeri gibi..)\n     */\n    Low: 1,\n    /**\n     * geliştiriciyi ilgilendiren hata türü...\n     */\n    High: 2,\n};\n","import { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { Response, Severity } from \"../Core/Response\";\nimport User from \"../Models/User\";\n\n/**\n * login the user\n * @param userContract\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function LoginUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"auth\", \"login\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        //parola değişikliği gerekiyor mu?\n        if (\n          res.data.data.accessToken &&\n          res.data.value.accessToken.token &&\n          res.data.value.accessToken.token.length > 0 &&\n          res.data.value.shouldNewPassword\n        ) {\n          HttpClientServiceInstance.setTokenOnLogin(\n            res.data.value.accessToken.token\n          );\n          response.value = { shouldNewPassword: true };\n        } else {\n\n          if(res.data.data && res.data.data.token){\n            let token = res.data.data.token;\n            let expriation = res.data.data.expiration;\n            HttpClientServiceInstance.setTokenOnLogin(token);\n\n            let user = new User();\n            user.token = token;\n            user.expiration = expriation;\n            response.value = user;\n          }else {\n            response.addResult(\"Token bilgisi alınamadı.\",Severity.High);\n          }\n        }\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"login\");\n    });\n\n  return response;\n}\n\n/**\n * parolayı yenilemek için doğrulama kodu istenir.\n * @param {userContract} userContract\n */\nexport async function ForgotPassword(userContract) {\n  let ro = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"forgotpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n      } else {\n        ro.addCoreResults(res.data.results);\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  return ro;\n}\n\n/**\n * yeni şifre belirler\n * @param {string} password\n */\nexport async function SetNewPassword(password, email) {\n  let ro = new Response();\n  let contract = new User();\n  contract.email = email;\n  contract.password = password;\n\n  let url = CommonTypes.GetUrlForAPI(\"user\", \"newpassword\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data && res.data.success) {\n        ro.value = res.data.value;\n        return ro;\n      } else {\n        ro.addCoreResults(res.data.results);\n        return ro;\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      ro.addResult(\"Parola değişikliği yapılamadı.\");\n      return ro;\n    });\n}\n\n/**\n * add a new artes user\n * @param {UserModel} userContract \n * @returns \n */\nexport async function AddUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"users\", \"add\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        response.value = res.data;\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"user-add\");\n    });\n\n  return response;\n\n}\n\n/**\n * update user\n * @param {UserModel} userContract \n * @returns \n */\nexport async function UpdateUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"users\", \"update\");\n\n  await HttpClientServiceInstance.post(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        response.value = res.data;\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"user-update\");\n    });\n\n  return response;\n\n}\n\n/**\n * delete user\n * @param {UserModel} userContract \n * @returns \n */\n export async function DeleteUser(userContract) {\n  let response = new Response();\n  let contract = userContract;\n  let url = CommonTypes.GetUrlForAPI(\"users\", \"\");\n\n  await HttpClientServiceInstance.delete(url, contract)\n    .then((res) => {\n      if (res.data.success) {\n        response.value = res.data;\n      } else {\n        response.addCoreResults(res.data.results);\n      }\n    })\n    .catch((e) => {\n      response.addResult(e.message, Severity.High, \"user-update\");\n    });\n\n  return response;\n\n}\n\n/**\n * get artes users\n * @returns Users\n */\nexport async function GetUsers() {\n  let returnObject = new Response();\n  \n  let url = CommonTypes.GetUrlForAPI(\"users\",\"getall\");\n\n  await HttpClientServiceInstance.get(\n      url\n  ).then( res => {\n    \n      if(res.data && res.data.success){\n          returnObject.value = res.data.data;\n      }\n      else{\n          returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"GETUSERS\");\n      }\n  })\n  .catch(err => {\n      returnObject.addResult(\"user listesi getirilemedi.\");\n  });\n\n  return returnObject;\n}\n\n","import * as actionTypes from \"./action-types\";\nimport User from \"../../Models/User\";\nimport { LoginUser } from \"../../Services/UserService\";\nimport { ShowStatusError } from \"../../Core/Helper\";\n\n//import Log from \"../../Services/Log\";\n\n/**\n *\n * @param {User}\n * @returns {{payload: *, type: string}}\n * @constructor\n */\nexport function LoginSuccess(userContract) {\n  return {\n    type: actionTypes.LOGIN,\n    payload: userContract,\n  };\n}\n\nexport function ChangeLoginStatusSuccess(\n  token,\n  expiration,\n  isSuccess,\n  isNewPassword = false\n) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_STATUS,\n    payload: {\n      token,\n      expiration,\n      isSuccess,\n      isNewPassword,\n    },\n  };\n}\n\nexport function ChangeLoginStatus(jwtObject) {\n  return function (dispatch) {\n    dispatch(\n      ChangeLoginStatusSuccess(\n        jwtObject.token,\n        jwtObject.expiration,\n        jwtObject.isSuccess,\n        jwtObject.isNewPassword\n      )\n    );\n  };\n}\n\nexport function ChangeLoginToNewPasswordSuccess(email) {\n  return {\n    type: actionTypes.CHANGE_LOGIN_NEW_PASSWORD,\n    payload: {\n      email,\n    },\n  };\n}\nexport function ChangeLoginToNewPassword(email) {\n  return function (dispatch) {\n    dispatch(ChangeLoginToNewPasswordSuccess(email));\n  };\n}\n\n/**\n * kullanıcı login olur\n * @param {User} user login kullanıcısı\n * @returns \n */\nexport function Login(user) {\n  return function (dispatch) {\n    return LoginUser(user)\n      .then((res) => {\n        if (res.success) {\n          if (res.value.shouldNewPassword) {\n            //dispatch(ChangeLoginToNewPassword(user.email));\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, false, true)\n            );\n          } else {\n            user = res.value;\n            dispatch(LoginSuccess(user));\n            //test\n            dispatch(\n              ChangeLoginStatusSuccess(user.token, user.expiration, true)\n            );\n          }\n        } else {\n          ShowStatusError(res.getResultsStringFormat());\n          dispatch(ChangeLoginStatusSuccess(\"\", new Date(), false));\n          dispatch(LoginSuccess(new User()));\n        }\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n}\n","import { Button, Grid, TextField, Typography } from \"@material-ui/core\";\nimport React, { Component } from \"react\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { connect } from \"react-redux\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport { bindActionCreators } from \"redux\";\nimport { SetNewPassword } from \"../../Services/UserService\";\nimport Cache from \"../../Services/Cache\";\n\n/**\n * password change component\n */\nclass PasswordChange extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: Cache.getItem(\"lastloginrequestuser\"),\n      newPassword: \"\",\n      newPassword2: \"\",\n    };\n  }\n\n  onSubmitForm = async () => {\n    if (IsNullOrEmpty(this.state.user.email)) {\n      ShowStatusError(\"mail adresi alınamadı.\");\n      return;\n    }\n    if (this.state.newPassword.length < 8) {\n      ShowStatusError(\"şifreniz en az 8 karakter olmalıdır.\");\n      return;\n    }\n    if (IsNullOrEmpty(this.state.newPassword)) {\n      ShowStatusError(\"yeni şifrenizi giriniz.\");\n      return;\n    }\n    if (this.state.newPassword.trim() !== this.state.newPassword2.trim()) {\n      ShowStatusError(\n        \"girdiğiniz parola ve tekrarı bir biri ile eşleşmemektedir.\"\n      );\n      return;\n    }\n\n    /**yeni parola kaydı */\n    await SetNewPassword(this.state.newPassword, this.state.user.email)\n      .then((response) => {\n        if (response && !response.success) {\n          ShowStatusError(response.getResultsStringFormat());\n        } else {\n          ShowStatusSuccess(\n            \"şifreniz kaydedildi. yeniden giriş yapabilirsiniz.\"\n          );\n          this.changeStatus();\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  changeStatus = () => {\n    this.props.actions.changeLoginStatus({\n      token: \"\",\n      expiration: new Date(),\n      isSuccess: false,\n    });\n  };\n  render() {\n    return (\n      <Grid container spacing={3} direction={\"row\"}>\n        <Grid item>\n          <Typography>{this.state.user.email}</Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre\"}\n            required\n            value={this.state.newPassword}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label={\"Yeni şifre tekrar\"}\n            required\n            value={this.state.newPassword2}\n            onChange={(e) => {\n              this.setState({ ...this.state, newPassword2: e.target.value });\n            }}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<SaveIcon />}\n            onClick={(e) => {\n              this.onSubmitForm();\n            }}\n          >\n            Kaydet\n          </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\nfunction mapStateToProps(state) {\n  return {\n    loginJwtObject: state.changeLoginStatusReducer,\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordChange);\n","import { CommonTypes } from \"../../Types/Common\";\nimport * as actionTypes from \"./action-types\";\nimport Cache from \"../../Services/Cache\";\nimport {HttpClientServiceInstance} from \"../../Services/HttpClient\";\n\nexport function getCityListSuccess(city) {\n  return {\n    type: actionTypes.GETCITYLIST,\n    payload: city,\n  };\n}\n\nexport function changeSelectedCityId(cityId) {\n  return {\n    type: actionTypes.CHANGE_SELECTED_CITY_ID,\n    payload: cityId,\n  };\n}\n\nexport function getCityList() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CityList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CityList))\n      );\n    }\n\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"citylist\");\n    \n    return HttpClientServiceInstance.post(url)\n        .then((res) => {\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n      dispatch(getCityListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n\nexport function getCountyListSuccess(countylist) {\n  return {\n    type: actionTypes.GETCOUNTYLIST,\n    payload: countylist,\n  };\n}\n\nexport function getCountyListAll() {\n  return function (dispatch) {\n    if (Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n      return dispatch(\n        getCountyListSuccess(Cache.lru.get(CommonTypes.CacheKeys.CountyList))\n      );\n    }\n    let url = CommonTypes.GetUrlForAPI(\"core\", \"countylist\");\n    return HttpClientServiceInstance.post(url).then((res) => {\n      //caching yapılır..\n      if (!Cache.lru.has(CommonTypes.CacheKeys.CountyList)) {\n        Cache.lru.set(\n          CommonTypes.CacheKeys.CountyList,\n          JSON.parse(JSON.stringify(res.data))\n        );\n      }\n\n      dispatch(getCountyListSuccess(JSON.parse(JSON.stringify(res.data))));\n    });\n  };\n}\n","import React, { Component } from \"react\";\nimport {\n  Col,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  FormFeedback,\n} from \"reactstrap\";\nimport User from \"../../Models/User\";\nimport Messages from \"../../Types/Messages\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport * as cityActions from \"../../redux/actions/city-county-actions\";\nimport * as loginActions from \"../../redux/actions/login-actions\";\nimport {\n  IsNullOrEmpty,\n  ShowStatusError,\n  ShowStatusSuccess,\n} from \"../../Core/Helper\";\nimport { Checkbox, FormControlLabel, Grid, Typography } from \"@material-ui/core\";\nimport { ForgotPassword } from \"../../Services/UserService\";\n\n/*\n * Login component (giriş yap)\n * */\nclass Login extends Component {\n  loginUserContract = new User();\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataContract: {\n        Email: \"\",\n        Password: \"\",\n      },\n      validate: {\n        emailState: \"\",\n      },\n      isForgotPassword: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.actions.changeLoginStatus({\n      token: \"\",\n      expiration: new Date(),\n      isSuccess: false,\n    });\n\n  }\n\n  validateEmail(e) {\n    const emailRex =\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    const { validate } = this.state;\n    if (emailRex.test(e.target.value)) {\n      validate.emailState = \"has-success\";\n    } else {\n  //TODO: validasyonu geçici olarak kaldırdım geri açılacak.\n      validate.emailState = \"has-success\";\n//      validate.emailState = \"has-danger\";\n    }\n    this.setState({ validate });\n  }\n\n  onForgotPassword = async () => {\n    let user = this.state.dataContract;\n    if (IsNullOrEmpty(user.Email)) {\n      ShowStatusError(\"mail adresinizi giriniz.\");\n      return;\n    }\n\n\n    await ForgotPassword(user)\n      .then((res) => {\n        if (res.success) {\n          ShowStatusSuccess(\n            \"Parola değiştirebilmeniz için doğrulama kodu mail adresinize gönderilmiştir.\"\n          );\n          this.setState({\n            ...this.state,\n            dataContract: {},\n            isForgotPassword: false,\n            validate: { emailState: \"\" },\n          });\n        } else {\n          ShowStatusError(res.getResultsStringFormat);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    return (\n            <Grid container direction=\"column\"  alignContent=\"center\" justifyContent=\"stretch\" spacing={3}>\n                <Grid item>\n                  <Typography variant=\"h3\"> Login </Typography>\n                </Grid>\n                <Grid item>\n                  <hr />\n                </Grid>\n                <Grid item>\n                  <Form className=\"form\">\n                    <Col>\n                      <FormGroup>\n                        <Label>{Messages.LabelNames.email}</Label>\n                        <Input\n                          valid={\n                            this.state.validate.emailState === \"has-success\"\n                          }\n                          invalid={\n                            this.state.validate.emailState === \"has-danger\"\n                          }\n                          type=\"email\"\n                          name=\"email\"\n                          id=\"userEmail\"\n                          autoComplete=\"username\"\n                          placeholder=\"\"\n                          onChange={(e) => {\n                            this.loginUserContract.email = e.target.value;\n                            var datac = this.state.dataContract;\n                            datac.Email = e.target.value;\n                            this.setState({ dataContract: datac });\n                          }}\n                          onBlur={(e) => this.validateEmail(e)}\n                        />\n                        <FormFeedback valid={true}>\n                          {\" \"}\n                          {Messages.EMailValid}\n                        </FormFeedback>\n                        <FormFeedback invalid=\"true\">\n                          {Messages.EMailInvalid}\n                        </FormFeedback>\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Label for=\"userLoginPassword\">\n                          {Messages.LabelNames.password}\n                        </Label>\n                        <Input\n                          type=\"password\"\n                          name=\"password\"\n                          id=\"userLoginPassword\"\n                          autoComplete=\"current-password\"\n                          onChange={(e) => {\n                            this.loginUserContract.password = e.target.value;\n                          }}\n                          disabled={this.state.isForgotPassword}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              onChange={(e) => {\n                                this.setState({\n                                  isForgotPassword: e.target.checked,\n                                });\n                              }}\n                              checked={this.state.isForgotPassword}\n                              name=\"forgot\"\n                            />\n                          }\n                          label=\"Parolamı Unuttum\"\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col>\n                      <FormGroup>\n                        <Button\n                          color={\"primary\"}\n                          onClick={(e) => {\n                            if (this.state.isForgotPassword)\n                              this.onForgotPassword();\n                            else {\n                              if (\n                                IsNullOrEmpty(this.loginUserContract.email) ||\n                                IsNullOrEmpty(this.loginUserContract.password)\n                              ) {\n                                ShowStatusError(\n                                  \"Email ve parola alanlarını doldurunuz.\"\n                                );\n                                return;\n                              }\n                              this.props.actions.loginUser(\n                                this.loginUserContract\n                              );\n                            }\n                          }}\n                        >\n                          {this.state.isForgotPassword\n                            ? \"Doğrulama Kodu Al\"\n                            : Messages.ActionNames.enter}\n                        </Button>\n                      </FormGroup>\n                    </Col>\n                  </Form>\n                </Grid>\n                <Grid item>\n                  <hr />\n                </Grid>             \n              </Grid>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    userContract: state.loginReducer,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      getCityList: bindActionCreators(cityActions.getCityList, dispatch),\n      loginUser: bindActionCreators(loginActions.Login, dispatch),\n      changeLoginStatus: bindActionCreators(\n        loginActions.ChangeLoginStatus,\n        dispatch\n      ),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport AppBarMenu from \"./Navigation/app-bar\";\nimport {Card, Container} from \"@material-ui/core\";\nimport ActionBar from \"./Navigation/action-bar\";\n\nimport {bindActionCreators} from \"redux\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport PasswordChange from \"./Begin/password-change\";\nimport Login from \"./Begin/Login\";\n\nfunction Layout(props) {\n    let loginControl = () => {\n         let usr = window.localStorage.getItem(\"user\");\n        // window.localStorage.removeItem(\"user\");\n        // let userc = new User();\n        // userc.userId = 1007;\n        // userc.firstName = \"api\";\n        // userc.lastName = \"api\";\n        // userc.email = \"api@gmail.com\";\n        // userc.token = \"asdasffasdf\";\n        // userc.userName = \"api\";\n        // userc.inboxNotificationCount = 0;\n        //\n        // window.localStorage.setItem(\"user\", JSON.stringify(userc));\n        // console.log(\"user active :\", userc);\n        //\n        // return props.children;\n        //todo: test e çıkmadan önce log-in geri aktifleştirilecek.\n        // eslint-disable-next-line no-unreachable\n        if (\n            props.loginJwtObject &&\n            props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword === false\n        ) {\n            return props.children;\n        } else if (\n            props.loginJwtObject &&\n            !props.loginJwtObject.isSuccess &&\n            props.loginJwtObject.isNewPassword\n        ) {\n            return <PasswordChange/>;\n        } else {\n            return (\n                <div>\n                    <Login/>\n                </div>\n            );\n        }\n    };\n\n    return (\n        <AppBarMenu>\n            <Container maxWidth=\"xl\">\n                <Card>\n                    <CardActions>\n                        <ActionBar/>\n                    </CardActions>\n                    <CardContent>\n                        {props.loginJwtObject ? loginControl() : <p/>}\n                    </CardContent>\n                </Card>\n            </Container>\n        </AppBarMenu>\n    );\n}\n\n//#region redux\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeBackdropStatus: bindActionCreators(\n                pageActions.changeBackDropStatus,\n                dispatch\n            ),\n        },\n    };\n}\n\nfunction mapStateToProps(state) {\n    return {\n        loginJwtObject: state.changeLoginStatusReducer,\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);\n\n//#endregion\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MUIDataTable from \"mui-datatables\";\n\n/**\n * listeleme tablosu\n * https://github.com/gregnb/mui-datatables#api\n */\nclass DataTable extends Component {\n  options = {\n    filterType: \"checkbox\",\n    onRowSelectionChange: this.props.onSelectedItemChange,\n    selectableRows: \"single\",\n    selectableRowsOnClick: true,\n    // onRowClick: (rowData, rowMeta) => {\n    //   debugger;\n    //   //todo : seçili satırla güncelleme yapılabilecek.\n    //   var a = rowData;\n    //   var g = rowMeta;\n    // },\n  };\n\n  render() {\n    return (\n      <div>\n        <MUIDataTable\n          title={this.props.title}\n          data={this.props.data}\n          columns={this.props.columns}\n          options={this.options}\n        />\n      </div>\n    );\n  }\n}\n\nDataTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  onSelectedItemChange: PropTypes.func,\n};\n\nexport default DataTable;\n","import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle from \"@material-ui/core/DialogTitle\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport Typography from \"@material-ui/core/Typography\";\nimport PropTypes from \"prop-types\";\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: \"absolute\",\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={onClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n/**\n * dialog form\n * @param props\n * @returns {*}\n * @constructor\n */\nexport default function DialogForm(props) {\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = () => {\n    if (props.handleClose) props.handleClose();\n\n    setOpen(false);\n  };\n\n\n  return (\n      <Dialog\n        onClose={handleClose}\n        fullWidth={true}\n        maxWidth={\"md\"}\n        aria-labelledby=\"customized-dialog-title\"\n        open={open}\n      >\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n          {props.title}\n        </DialogTitle>\n        <DialogContent dividers>\n          {props.content ? props.content : <p>no content.</p>}\n        </DialogContent>\n        <DialogActions>\n          {props.actions ? (\n            props.actions\n          ) : (\n            <Button autoFocus onClick={handleClose} color=\"primary\">\n              Tamam\n            </Button>\n          )}\n        </DialogActions>\n      </Dialog>\n  );\n}\n\nDialogForm.propTypes = {\n actions: PropTypes.any,\n content:PropTypes.any.isRequired,\n title:PropTypes.any.isRequired\n}\n","import { CommonTypes } from \"../Types/Common\";\nimport Cache from \"./Cache\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\nimport { Response, Severity } from \"../Core/Response\";\n\n/**\n * the parameter services\n */\nexport class ParameterService {\n  /**\n   * parametre listesi döndürür.\n   * @param {String} paramType - parametre tipi\n   */\n  async GetParameter(paramType) {\n    let returnObject = new Response();\n\n    if (!paramType || paramType.length < 1) {\n      returnObject.addResult(\"Parametre tipi alınamadı.\", Severity.Low);\n      return returnObject;\n    }\n\n    let parameters = [];\n\n    await HttpClientServiceInstance.post(\n      CommonTypes.GetUrlForAPI(\"core\", \"getparameter\"),\n      {\n        ParamType: paramType,\n      }\n    )\n      .then((res) => {\n        let data = res.data;\n        if (data && data.length > 0) {\n          data.forEach((element) => {\n            parameters.push(element);\n          });\n          Cache.setParameter(paramType, parameters);\n        }\n\n        returnObject.valueList = parameters;\n      })\n      .catch((e) => {\n        console.log(e);\n        returnObject.addResult(\"parametre listesi getirilemedi.\", Severity.Low);\n      });\n\n    return returnObject;\n  }\n}\n\n/**\n * rol listesini döndürür\n */\nexport async function GetRoleList() {\n  let returnData = [];\n\n  if (Cache.lru.has(\"rolelist\")) {\n    let listfromcache = Cache.lru.get(\"managerapartmentlist\");\n    returnData = listfromcache;\n  }\n\n  await HttpClientServiceInstance.post(\n    CommonTypes.GetUrlForAPI(\"core\", \"getrolelist\")\n  )\n    .then((res) => {\n      let data = res.data;\n      if (data && data.length > 0) {\n        Cache.lru.set(\"rolelist\", data);\n      }\n      returnData = data ? data : [];\n    })\n    .catch((e) => {\n      console.log(e);\n      returnData = undefined;\n    });\n\n  return returnData;\n}\n\n/**\n * ülke listesi getirir.\n * @returns []\n */\nexport async function GetCountryList(){\n  let returnData = [];\n\n  await HttpClientServiceInstance.get(\n    CommonTypes.GetUrlForAPI(\"constants\", \"get-countries-list\")\n  )\n    .then((res) => {\n        if(res.data && res.data.data){\n            let data = res.data.data;\n            let countryList = [];\n            if (data && data.length > 0) {\n                for (const item of data) {\n                    countryList.push({name:item.constantValue,code:item.constantCode})\n                }\n                Cache.lru.set(\"countrylist\", data);\n            }\n            returnData = countryList;\n        }\n    })\n    .catch((e) => {\n      console.log(e);\n      returnData = undefined;\n    });\n\n  return returnData;\n}\n","import { Response, Severity } from \"../Core/Response\";\nimport { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n\n/**\n * hotel listesi döndürür.\n * @returns {Promise<Response>}\n * @constructor\n */\nexport async function GetHotels() {\n    let returnObject = new Response();\n    \n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"get-hotel-list\");\n\n    await HttpClientServiceInstance.get(\n        url\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = res.data.data;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"GETHOTELS\");\n        }\n    })\n    .catch(err => {\n        returnObject.addResult(\"hotel listesi getirilemedi.\");\n    });\n\n    return returnObject;\n}\n\n/**\n * yeni otel kaydı\n * @param {HotelModel} model\n * @return {Response}\n */\nexport async function SaveHotel(model) {\n    let returnObject = new Response();\n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"add-hotel\");\n\n    await HttpClientServiceInstance.post(\n        url,model\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = res.data.data;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"SAVEHOTEL\");\n        }\n    })\n    .catch(err => {\n        console.log(err);\n        returnObject.addResult(\"hotel kaydı yapılamadı.\");\n    })\n\n    return returnObject;\n}\n\nexport async function UpdateHotel(model) {\n    let returnObject = new Response();\n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"update-hotel\");\n\n    await HttpClientServiceInstance.put(url,model)\n    .then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = true;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage, Severity.High,\"UPDATEHOTEL\");\n        }\n    })\n    .catch(err => {\n        console.log(err);\n        returnObject.addResult(\"güncelleme işlemi başarısız oldu.\");\n    })\n\n    return returnObject;\n}\n\nexport async function DeleteHotel(model) {\n    let returnObject = new Response();\n    let url = CommonTypes.GetUrlForAPI(\"hotels\",\"delete-hotel\");\n\n    await HttpClientServiceInstance.put(url,model)\n    .then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = true;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage, Severity.High,\"UPDATEHOTEL\");\n        }\n    })\n    .catch(err => {\n        console.log(err);\n        returnObject.addResult(\"güncelleme işlemi başarısız oldu.\");\n    })\n\n    return returnObject;\n}\n","export default class HotelModel {\n    hotelId\n    hotelName\n    hotelCode\n    hotelAdminName\n    hotelAdminMail\n    creationdate\n    validSectors\n    allowGeneralCard=false\n    options\n    countryCode\n    mobileCountryCode\n    mobileNumber\n    contactType=1; //email 2-telefon\n    address\n    accessCard=true\n    accessEkey=true\n    accessPasscode=true\n}","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {TextField} from \"@material-ui/core\";\n\n/**\n * combobox component\n * @param {*} props props\n */\nclass ComboBox extends Component {\n\n    constructor(props) {\n        super(props);\n        let defaultList = [{name: 'Seçiniz'}]\n        this.state = {\n            defaultValue: props.defaultValue ? props.defaultValue : undefined,\n            dataList: props.itemSource && props.itemSource.length > 0 ? props.itemSource:defaultList,\n            selectedValue: {name: 'Seçiniz'},\n            isDisable: props.disabled,\n            label: props.label\n        }\n    }\n\n    componentDidMount() {\n        let tempList = [];\n        if (this.props.itemSource.length > 0) {\n            tempList.push(...this.props.itemSource);\n        if(this.props.defaultValue){\n            // eslint-disable-next-line no-unused-expressions\n         let tlst = this.props.itemSource.find((val) => val === this.props.defaultValue);\n         if(tlst && tlst.length>0) this.state.selectedValue = tlst[0];\n        }\n        }\n        this.setState({dataList:tempList})\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(this.props.itemSource.length !== prevProps.itemSource.length){\n            let tempList = [];\n            if (this.props.itemSource.length > 0) {\n               tempList = this.props.itemSource;\n               tempList.splice(0,0,{name: 'Seçiniz'})\n            }\n            this.setState({dataList:tempList,selectedValue:tempList[0]})\n        }\n        if(this.props.defaultValue !== prevProps.defaultValue){\n            if(this.props.defaultValue){\n                // eslint-disable-next-line no-unused-expressions\n                let tlst = this.props.itemSource.filter((val) => val === this.props.defaultValue);\n                if(tlst && tlst.length>0){\n                    this.setState({selectedValue:tlst[0]})\n                }\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Autocomplete\n                    id=\"combo-box-demo\"\n                    options={this.state.dataList}\n                    value={this.state.selectedValue}\n                    getOptionLabel={(option) => option.name}\n                    renderInput={(params) => (\n                        <TextField {...params} label={this.state.label} variant=\"outlined\" fullWidth={this.props.fullWidth}/>\n                    )}\n                    onChange={(e, value, reason) => {\n                        if(value){\n                        this.setState({selectedValue: value})\n                        if (this.props.onSelectedItemChange) {\n                            this.props.onSelectedItemChange(value);\n                        }\n                        }\n                    }}\n                    fullWidth\n                    disabled={this.state.isDisable}\n                />\n            </div>\n        );\n    }\n\n}\n\nComboBox.propTypes = {\n    label: PropTypes.string.isRequired,\n    onSelectedItemChange: PropTypes.func,\n    itemSource: PropTypes.array.isRequired,\n    fullWidth: PropTypes.bool,\n    defaultValue:PropTypes.object\n};\n\nexport default ComboBox;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Avatar, Card, CardContent, CardHeader, Checkbox, FormControlLabel, Grid, TextField} from \"@material-ui/core\";\nimport {GetIntValue, IsNullOrEmpty, IsNullOrEmptyAll} from \"../Core/Helper\";\nimport ComboBox from \"./ToolBox/combo-box\";\nimport PropTypes from \"prop-types\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nclass HotelAdd extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderCount:0,\n            isUpdate:this.props.isUpdate,\n            hotel: \n            this.props.hotelModel ?\n            this.props.hotelModel :\n            {\n                validSectors:\"1,2,3,4,5,6,7,8,9,10\"\n            },\n            countryList: props.countryList && props.countryList.length > 0 ? props.countryList : [],\n            isLoading:true,\n            defaultCountry:undefined,\n            validation:{\n                hotelName:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                countryCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelAdminName:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelAdminMail:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                validSectors:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                mobileCountryCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                mobileNumber:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                address:{\n                    isValid:true,\n                    helperText:\"\"\n                }\n            }\n        };\n\n    }\n\n    componentDidMount() {\n        if(this.state.hotel.countryCode && this.state.countryList.length>0){\n            // eslint-disable-next-line no-unused-expressions\n            let country = this.state.countryList.filter(val => val.code === this.state.hotel.countryCode);\n            if(country){\n                this.setState({defaultCountry:country[0]})\n            }\n        }\n    }\n\n    validateAndSetHotel = ()=>{\n        this.state.hotel.validSectors = \"1,2,3,4,5,6,7,8,9,10\";\n    if(IsNullOrEmptyAll([this.state.hotel.hotelName,this.state.hotel.hotelAdminName,\n        this.state.hotel.hotelAdminMail,this.state.hotel.address,this.state.hotel.mobileNumber,this.state.hotel.validSectors])){\n        return;\n    }\n    if(GetIntValue(this.state.hotel.hotelCode)< 1 ||\n        GetIntValue(this.state.hotel.countryCode)< 1 ||\n        GetIntValue(this.state.hotel.mobileCountryCode)< 1){\n        return;\n    }\n\n    if(this.props.setHotel) this.props.setHotel(this.state.hotel)\n\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardHeader\n                    avatar={\n                        <Avatar\n                            aria-label=\"recipe\"\n                            style={{backgroundColor: \"#26bdba\"}}\n                        >\n                            \"A\"\n                        </Avatar>\n                    }\n                    title={\"ARTES\"}\n                    subheader={\"NEW HOTEL\"}\n                />\n                <CardContent>\n                    <Grid container spacing={3} direction=\"column\" alignItems=\"stretch\">\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth={true}\n                                required\n                                error={!this.state.validation.hotelName.isValid}\n                                helperText={this.state.validation.hotelName.helperText}\n                                label=\"Hotel Name\"\n                                variant=\"standard\"\n                                value={this.state.hotel.hotelName}\n                                onChange={(e) => {\n                                    let val = this.state.hotel;\n                                    val.hotelName = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.hotelName)){\n                                        validObj.hotelName.isValid = false;\n                                        validObj.hotelName.helperText = \"Geçerli bir otel ismi girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelName.isValid = true\n                                        validObj.hotelName.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelCode.isValid}\n                                helperText={this.state.validation.hotelCode.helperText}\n                                type={\"number\"}\n                                label=\"Hotel Code\"\n                                variant=\"standard\"\n                                value={this.state.hotel.hotelCode}\n                                onChange={(e) => {\n                                    //this.state.hotel.hotelCode = parseInt(e.target.value);\n                                    let val = this.state.hotel;\n                                    val.hotelCode = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(GetIntValue(this.state.hotel.hotelCode) < 1){\n                                        validObj.hotelCode.isValid = false;\n                                        validObj.hotelCode.helperText = \"Geçerli bir otel kodu girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelCode.isValid = true\n                                        validObj.hotelCode.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <ComboBox\n                                itemSource={this.state.countryList}\n                                label=\"Country\"\n                                fullWidth={true}\n                                defaultValue={this.state.defaultCountry}\n                                onSelectedItemChange={ (selectedValue)=>{\n                                    //this.state.hotel.countryCode = selectedValue.code\n                                    let val = this.state.hotel;\n                                    val.countryCode = selectedValue.code;\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelAdminName.isValid}\n                                helperText={this.state.validation.hotelAdminName.helperText}\n                                label=\"Admin Name\"\n                                variant=\"standard\"\n                                value={this.state.hotel.hotelAdminName}\n                                onChange={(e) => {\n                                    //this.state.hotel.hotelAdminName = e.target.value;\n                                    let val = this.state.hotel;\n                                    val.hotelAdminName = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.hotelAdminName)){\n                                        validObj.hotelAdminName.isValid = false;\n                                        validObj.hotelAdminName.helperText = \"Geçerli bir isim girmelisiniz.\";\n                                    }else{\n                                        validObj.hotelAdminName.isValid = true\n                                        validObj.hotelAdminName.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.hotelAdminMail.isValid}\n                                helperText={this.state.validation.hotelAdminMail.helperText}\n                                label=\"Admin Email\"\n                                variant=\"standard\"\n                                value={this.state.hotel.hotelAdminMail}\n                                onChange={(e) => {\n                                    //this.state.hotel.hotelAdminMail = e.target.value;\n                                    let val = this.state.hotel;\n                                    val.hotelAdminMail = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                    const emailRex =\n                                        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                                    var validObj = {...this.state.validation};\n                                    if (emailRex.test(this.state.hotel.hotelAdminMail)) {\n                                        validObj.hotelAdminMail.isValid = true;\n                                        validObj.hotelAdminMail.helperText = \"\";\n                                    }else {\n                                        validObj.hotelAdminMail.isValid = false;\n                                        validObj.hotelAdminMail.helperText = \"Geçerli bir mail adresi girmelisiniz.\";\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.mobileCountryCode.isValid}\n                                helperText={this.state.validation.mobileCountryCode.helperText}\n                                type={\"number\"}\n                                label=\"Mobile Country Code\"\n                                variant=\"standard\"\n                                value={this.state.hotel.mobileCountryCode}\n                                onChange={(e) => {\n                                    //this.state.hotel.mobileCountryCode = parseInt(e.target.value);\n                                    let val = this.state.hotel;\n                                    val.mobileCountryCode = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(GetIntValue(this.state.hotel.mobileCountryCode) < 1){\n                                        validObj.mobileCountryCode.isValid = false;\n                                        validObj.mobileCountryCode.helperText = \"Geçerli bir ülke kodu girmelisiniz.\";\n                                    }else{\n                                        validObj.mobileCountryCode.isValid = true\n                                        validObj.mobileCountryCode.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.mobileNumber.isValid}\n                                helperText={this.state.validation.mobileNumber.helperText}\n                                label=\"Mobile Phone Number\"\n                                variant=\"standard\"\n                                value={this.state.hotel.mobileNumber}\n                                onChange={(e) => {\n                                    //this.state.hotel.mobileNumber = e.target.value;\n                                    let val = this.state.hotel;\n                                    val.mobileNumber = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.mobileNumber)){\n                                        validObj.mobileNumber.isValid = false;\n                                        validObj.mobileNumber.helperText = \"Geçerli bir telefon numarası girmelisiniz.\";\n                                    }else{\n                                        validObj.mobileNumber.isValid = true\n                                        validObj.mobileNumber.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.address.isValid}\n                                helperText={this.state.validation.address.helperText}\n                                label=\"Adres\"\n                                variant=\"standard\"\n                                value={this.state.hotel.address}\n                                onChange={(e) => {\n                                    //this.state.hotel.address = e.target.value;\n                                    let val = this.state.hotel;\n                                    val.address = e.target.value\n                                    this.setState({hotel:{...val}});\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.address)){\n                                        validObj.address.isValid = false;\n                                        validObj.address.helperText = \"Geçerli bir adres girmelisiniz.\";\n                                    }else{\n                                        validObj.address.isValid = true\n                                        validObj.address.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.validSectors.isValid}\n                                helperText={this.state.validation.validSectors.helperText}\n                                disabled={true}\n                                label=\"Valid Sectors\"\n                                variant=\"standard\"\n                                value={\"1,2,3,4,5,6,7,8,9,10\"}\n                                onChange={(e) => {\n                                    this.state.hotel.validSectors = e.target.value;\n                                    this.validateAndSetHotel();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.hotel.validSectors)){\n                                        validObj.validSectors.isValid = false;\n                                        validObj.validSectors.helperText = \"Geçerli bir sector girmelisiniz.\";\n                                    }else{\n                                        validObj.validSectors.isValid = true\n                                        validObj.validSectors.helperText = \"\"\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                        <FormControlLabel control={<Checkbox\n                            defaultChecked\n                            onChange={(event,checked)=>{\n                                this.state.hotel.accessCard = checked;\n                            }}\n                            />} label=\"Kart Erişimi\" />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                        <FormControlLabel control={<Checkbox\n                            defaultChecked\n                            onChange={(event,checked)=>{\n                                this.state.hotel.accessEKey = checked;\n                            }}\n                            />} label=\"Kilit Erişimi\" />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                        <FormControlLabel control={<Checkbox\n                            defaultChecked\n                            onChange={(event,checked)=>{\n                                this.state.hotel.accessPasscode = checked;\n                            }}\n                            />} label=\"Parola Erişimi\" />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nHotelAdd.defaultProps = {\n    countryList: PropTypes.array.isRequired,\n    setHotel:PropTypes.func.isRequired,\n    isUpdate:PropTypes.bool,\n    hotelModel: PropTypes.object\n};\n\nexport default connect(\n    mapStateToProps,\n)(HotelAdd);","import React, {Component} from \"react\";\nimport {CommonTypes} from \"../Types/Common\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Card, Grid, Typography} from \"@material-ui/core\";\nimport DataTable from \"./ToolBox/DataTable\";\nimport DialogForm from \"./ToolBox/dialog-form\";\nimport {GetCountryList} from \"../Services/CoreService\";\nimport { ShowStatusError, ShowStatusSuccess} from \"../Core/Helper\";\nimport Button from \"@material-ui/core/Button\";\nimport {GetHotels, SaveHotel, UpdateHotel} from \"../Services/HotelService\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport HotelModel from \"../Models/hotel/HotelModel\";\nimport HotelAdd from \"./hotel-add\";\n\n\n/***\n * ana sayfa\n */\nclass Home extends Component {\n    \n    static displayName = Home.name;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpenDialogForm: false,\n            isOpenDialogForUpdate:false,\n            hotel: {},\n            countryList: [],\n            hotelList:[],\n            isLoading:true,\n            selectedHotel:{},\n            defaultCountry:{},\n            isAddedHotelValid:false\n        };\n\n    }\n\n    columns = [\n        {\n            name: \"hotelName\",\n            label: \"Hotel Name\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"hotelAdminName\",\n            label: \"Admin Name\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"hotelAdminMail\",\n            label: \"Administrator\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"creationdate\",\n            label: \"Created At\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"validSectors\",\n            label: \"Valid Sectors\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"allowGeneralCard\",\n            label: \"Allow General Card\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"accessCard\",\n            label: \"Access Card\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"accessEkey\",\n            label: \"Access Ekey\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"accessPasscode\",\n            label: \"Access Passcode\",\n            options: {filter: true, sort: true},\n        }\n    ];\n\n    componentDidMount() {\n        if (this.props.actions.changeActiveResourceCode) {\n            this.props.actions.changeActiveResourceCode(\n                CommonTypes.Resources.home.resourceCode\n            );\n        }\n\n        if (this.props.actions.executeCommand) {\n            this.props.actions.executeCommand(this.onExecute);\n        }\n\n        this.onLoad();\n    }\n\n    onLoad = async ()=>{\n        this.getCountries();\n        await Promise.all([this.getCountries,this.getList()])\n        this.setState({\n            isLoading:false\n        });\n    }\n\n    dialogContent = (<div></div>)\n\n    onExecute = async (key) => {\n        switch (key) {\n            ///create hotel\n            case CommonTypes.ActionKeys.CreateHotel:\n                this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:false})\n                break;\n            \n            case CommonTypes.ActionKeys.Edit:\n                if(!this.state.selectedHotel.hotelId || this.state.selectedHotel.hotelId < 1){\n                    ShowStatusError(\"güncelleme yapmak için kayıt seçmeniz gerekmektedir.\");\n                    return;\n                }\n                    this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:true})\n                    break;    \n            case CommonTypes.ActionKeys.GetList:\n                this.getList();\n                break;\n\n                default:\n                break;\n        }\n    };\n\n\n    dialogGridMdSize = 7;\n\n    getCountries = async () => {\n        await GetCountryList()\n            .then(\n                (data) => {\n                    if (data && data.length > 0) {\n                        this.setState({countryList: data})\n                    }\n                }\n            ).catch(e => {\n                console.error(e);\n                ShowStatusError(\"ülke listesi getirilemedi.\");\n            })\n    }\n\n    onCreate =async (hotelContract) => {\n        debugger;\n        var hotelModel = new HotelModel();\n        hotelModel = {...hotelContract};\n        hotelModel.allowGeneralCard = false;\n        hotelModel.contactType = 1;\n\n       var response = await SaveHotel(hotelModel);\n        if(!response || !response.success){\n            ShowStatusError(response.getResultsStringFormat());\n            return;\n        }\n       if(response && response.success){\n           ShowStatusSuccess(\"kayıt başarılı\");\n           await this.getList();\n       }\n\n    }\n\n    onUpdate =async (hotelContract) => {\n        console.log(\"update hotel:\",hotelContract);\n        debugger;\n        var hotelModel = new HotelModel();\n        hotelModel = {...hotelContract};\n        hotelModel.allowGeneralCard = false;\n        hotelModel.contactType = 1;\n\n       var response = await UpdateHotel(hotelModel);\n        if(!response || !response.success){\n            ShowStatusError(response.getResultsStringFormat());\n            return;\n        }\n       if(response && response.success){\n           ShowStatusSuccess(\"güncellendi.\");\n           await this.getList();\n       }\n\n    }\n\n\n    async getList(){\n        this.setState({isLoading:true})\n        GetHotels()\n            .then(response => {\n             if(!response.success){\n                 ShowStatusError(response.getResultsStringFormat());\n             }\n             if(response.value && response.value.length > 0){\n                 this.setState({hotelList:response.value,isLoading:false})\n             }\n            })\n            .catch(\n                e=>{\n                    ShowStatusError(e.message);\n                    this.setState({isLoading:false})\n                }\n            )\n    }\n\n    handleCloseDialog = () => {\n        this.setState({isOpenDialogForm: false});\n    };\n    handleOpenDialog = () => {\n        this.setState({isOpenDialogForm: true});\n    };\n\n    validateCreateModel = () => {\n        return this.state.isAddedHotelValid;\n    }\n\n    setHotel = (hotel)=>{\n        this.setState({\n            hotel:hotel,\n            isAddedHotelValid:true\n        });\n    }\n\n    render() {\n        return (\n            <LoadingOverlay\n            active={this.state.isLoading}\n            spinner\n            text={'loading...'}>\n                <Grid container direction=\"column\" spacing={3}>\n\n                    <Grid item>\n                        <Typography variant='h4'>\n                            Hotel\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Card elevation={1}>\n                            <DataTable\n                                columns={this.columns}\n                                data={this.state.hotelList}\n                                onSelectedItemChange={(\n                                    currentRowIndex,\n                                    allRowsIndexes,\n                                    rowsSelectedIndex\n                                ) => {\n                                 \n                                    if(this.state.hotelList && this.state.hotelList.length > 0 && rowsSelectedIndex){\n                                        var selectedData = this.state.hotelList[rowsSelectedIndex];\n                                        this.state.selectedHotel = selectedData\n                                    }\n                                }\n                                }\n                            />\n                        </Card>\n                    </Grid>\n                    {this.state.isOpenDialogForm ? (\n                        <DialogForm\n                            count={this.state.renderCount}\n                            title={\"Create Hotel\"}\n                            content={(<HotelAdd \n                                countryList={this.state.countryList} \n                                setHotel={this.setHotel}\n                                isUpdate={this.state.isOpenDialogForUpdate}\n                                hotelModel={this.state.isOpenDialogForUpdate ? this.state.selectedHotel : undefined} />)}\n                            handleClose={this.handleCloseDialog}\n                            actions={(\n                                <Button autoFocus\n                                        disabled={!this.state.isAddedHotelValid}\n                                        onClick={()=>{\n                                    if(!this.validateCreateModel()){\n                                        return;\n                                    }\n                                    this.handleCloseDialog()\n                                    if(this.state.isOpenDialogForUpdate){\n                                        this.onUpdate(this.state.hotel)\n                                    }\n                                    else{\n                                        this.onCreate(this.state.hotel)\n                                    }\n                                }} color=\"primary\">\n                                    Gönder\n                                </Button>\n                            )}\n                        />\n                    ) : (\n                        <p></p>\n                    )}\n                </Grid>\n            </LoadingOverlay>\n\n    );\n    }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeActiveResourceCode: bindActionCreators(\n                pageActions.changeActiveResourceCode,\n                dispatch\n            ),\n            executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import { Response, Severity } from \"../Core/Response\";\nimport { CommonTypes } from \"../Types/Common\";\nimport { HttpClientServiceInstance } from \"./HttpClient\";\n\n/**\n * getting devices\n * @returns \n */\nexport async function GetDevices() {\n    let returnObject = new Response();\n    \n    let url = CommonTypes.GetUrlForAPI(\"brasscodevices\",\"getall\");\n\n    await HttpClientServiceInstance.get(\n        url\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = res.data.data;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"GETDEVICES\");\n        }\n    })\n    .catch(err => {\n        returnObject.addResult(\"device listesi getirilemedi.\");\n    });\n\n    return returnObject;\n}\n\n/**\n * save the device\n * @param deviceModel\n * @return {Promise<Response>}\n * @constructor\n */\nexport async function SaveDevice(deviceModel) {\n    let returnObject = new Response();\n\n    let url = CommonTypes.GetUrlForAPI(\"brasscodevices\",\"save\");\n\n    await HttpClientServiceInstance.post(\n        url,\n        deviceModel\n    ).then( res => {\n        debugger;\n        if(res.data && res.data.success){\n            returnObject.value = true;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"GETDEVICES\");\n        }\n    })\n        .catch(err => {\n            returnObject.addResult(\"kayıt işlemi yapılamadı.\");\n        });\n\n    return returnObject;\n}\n\n/**\n * delete the device\n * @param {DeviceModel} deviceModel\n * @returns \n */\nexport async function DeleteDevice(deviceModel) {\n    let returnObject = new Response();\n\n    let url = CommonTypes.GetUrlForAPI(\"brasscodevices\",\"delete\");\n\n    await HttpClientServiceInstance.post(\n        url,\n        deviceModel\n    ).then( res => {\n        if(res.data && res.data.success){\n            returnObject.value = true;\n        }\n        else{\n            returnObject.addResult(res.data && res.data.errorMessage,Severity.High,\"DELETEDEVICES\");\n        }\n    })\n        .catch(err => {\n            returnObject.addResult(\"silme işlemi yapılamadı.\");\n        });\n\n    return returnObject;\n}\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Avatar, Card, CardContent, CardHeader, Grid, TextField} from \"@material-ui/core\";\nimport { IsNullOrEmptyAll} from \"../Core/Helper\";\nimport ComboBox from \"./ToolBox/combo-box\";\nimport PropTypes from \"prop-types\";\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nclass DeviceAdd extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderCount:0,\n            isUpdate:this.props.isUpdate,\n            hotelList: this.props.hotelList,\n            defaultHotel:{\n                value:0,\n                name:\"Seçiniz\"\n            },\n            device:\n                this.props.deviceModel ?\n                    this.props.deviceModel :\n                    {},\n            isLoading:true,\n            validation:{\n                deviceTypeCd:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                uniqueCode:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                hotelId:{\n                    isValid:true,\n                    helperText:\"\"\n                }\n            }\n        };\n\n    }\n\n    componentDidMount() {\n        if(this.state.device.hotelId && this.state.hotelList.length>0){\n            // eslint-disable-next-line no-unused-expressions\n            let hotel = this.state.hotelList.filter(val => val.hotelId === this.state.device.hotelId);\n            if(hotel){\n                this.setState({defaultCountry:hotel[0]})\n            }\n        }\n    }\n\n    validateAndSetDevice = ()=>{\n\n        if(IsNullOrEmptyAll([this.state.device.uniqueCode, this.state.device.deviceTypeCd])){\n            return;\n        }\n        if(!this.state.device.hotelId || this.state.device.hotelId < 1){\n            return;\n        }\n\n        if(this.props.setDevice) this.props.setDevice(this.state.device)\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardHeader\n                    avatar={\n                        <Avatar\n                            aria-label=\"recipe\"\n                            style={{backgroundColor: \"#26bdba\"}}\n                        >\n                            \"D\"\n                        </Avatar>\n                    }\n                    title={\"ARTES\"}\n                    subheader={\"NEW DEVICE\"}\n                />\n                <CardContent>\n                    <Grid container spacing={5} direction=\"column\" alignItems=\"stretch\">\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.uniqueCode.isValid}\n                                helperText={this.state.validation.uniqueCode.helperText}\n                                type={\"text\"}\n                                label=\"Unique Code\"\n                                variant=\"standard\"\n                                value={this.state.device.uniqueCode}\n                                onChange={(e) => {\n                                    //this.state.hotel.hotelCode = parseInt(e.target.value);\n                                    let val = this.state.device;\n                                    val.uniqueCode = e.target.value\n                                    this.setState({device:{...val}});\n                                    this.validateAndSetDevice();\n                                }}\n                            />\n\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <ComboBox\n                                itemSource={[\n                                    {\n                                        name:\"LOCK\"\n                                    },{\n                                    name:\"CARD\"\n                                    },\n                                    {\n                                        name:\"GATEWAY\"\n                                    }]}\n                                label=\"Type\"\n                                fullWidth={true}\n                                defaultValue={{name:\"LOCK\"}}\n                                onSelectedItemChange={ (selectedValue)=>{\n                                    //this.state.hotel.countryCode = selectedValue.code\n                                    let val = this.state.device;\n                                    val.deviceTypeCd = selectedValue.name;\n                                    this.setState({device:{...val}});\n                                    this.validateAndSetDevice();\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                            <ComboBox\n                                itemSource={this.state.hotelList}\n                                label=\"Hotel\"\n                                fullWidth={true}\n                                defaultValue={this.state.defaultHotel}\n                                onSelectedItemChange={ (selectedValue)=>{\n                                    let val = this.state.device;\n                                    val.hotelId = selectedValue.value;\n                                    this.setState({device:{...val}});\n                                    this.validateAndSetDevice()\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nDeviceAdd.defaultProps = {\n    hotelList: PropTypes.array.isRequired,\n    setDevice:PropTypes.func.isRequired,\n    isUpdate:PropTypes.bool,\n};\n\nexport default connect(\n    mapStateToProps,\n)(DeviceAdd);","export default class DeviceModel {\n    brasscoDeviceId\n    deviceTypeCd\n    uniqueCode\n    hotelId\n    creationDate\n}","import React, {Component} from \"react\";\nimport {CommonTypes} from \"../Types/Common\";\nimport * as pageActions from \"../redux/actions/page-actions\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Card, Grid, Typography} from \"@material-ui/core\";\nimport DataTable from \"./ToolBox/DataTable\";\nimport DialogForm from \"./ToolBox/dialog-form\";\nimport {ShowStatusError, ShowStatusSuccess,} from \"../Core/Helper\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport {DeleteDevice, GetDevices, SaveDevice} from \"../Services/DeviceService\";\nimport Button from \"@material-ui/core/Button\";\nimport DeviceAdd from \"./DeviceAdd\";\nimport {GetHotels,} from \"../Services/HotelService\";\nimport DeviceModel from \"../Models/device/DeviceModel\";\n\n\n/***\n * ana sayfa\n */\nclass DeviceComponent extends Component {\n    static displayName = DeviceComponent.name;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpenDialogForm: false,\n            isOpenDialogForUpdate:false,\n            device: {},\n            deviceList:[],\n            hotelList:[],\n            isLoading:true,\n            selectedDevice:{},\n            isAddedDeviceValid:false\n        };\n    }\n\n    columns = [\n        {\n            name:\"brasscoDeviceId\",\n            label:\"Id\",\n            options:{filter: true, sort: true}\n        },\n        {\n            name:\"deviceTypeCd\",\n            label:\"Type\",\n            options:{filter: true, sort: true}\n        },\n        {\n            name: \"uniqueCode\",\n            label: \"Unique Code\",\n            options: {filter: true, sort: true},\n        },\n        {\n            name: \"hotelId\",\n            label: \"Hotel Id\",\n            options: {filter: true, sort: true},\n        }\n    ];\n\n    componentDidMount() {\n        if (this.props.actions.changeActiveResourceCode) {\n            this.props.actions.changeActiveResourceCode(\n                CommonTypes.Resources.device.resourceCode\n            );\n        }\n\n        if (this.props.actions.executeCommand) {\n            this.props.actions.executeCommand(this.onExecute);\n        }\n\n        this.onLoad();\n    }\n\n    onLoad = async ()=>{\n        await Promise.all([this.getList(),this.getHotels()])\n        this.setState({\n            isLoading:false\n        });\n    }\n\n    dialogContent = (<div></div>)\n\n    onExecute = async (key) => {\n        switch (key) {\n            ///create device\n            case CommonTypes.ActionKeys.CreateDevice:\n                this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:false})\n                break;\n            \n            case CommonTypes.ActionKeys.DeleteDevice:\n                if(!this.state.selectedDevice.brasscoDeviceId || this.state.selectedDevice.brasscoDeviceId < 1){\n                    ShowStatusError(\"işlem yapmak için kayıt seçmeniz gerekmektedir.\");\n                    return;\n                }\n                    this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:true})\n                    break;    \n            case CommonTypes.ActionKeys.GetList:\n                this.getList();\n                break;\n\n                default:\n                break;\n        }\n    };\n\n    dialogGridMdSize = 7;\n\n    async getList(){\n        this.setState({isLoading:true})\n        GetDevices()\n            .then(response => {\n             if(!response.success){\n                 ShowStatusError(response.getResultsStringFormat());\n             }\n             if(response.value && response.value.length > 0){\n                 this.setState({deviceList:response.value,isLoading:false})\n             }\n            })\n            .catch(\n                e=>{\n                    ShowStatusError(e.message);\n                    this.setState({isLoading:false})\n                }\n            )\n    }\n    getHotels = async () => {\n        await GetHotels()\n            .then(\n                (response) => {\n                    if (response.value && response.value.length > 0) {\n                        const hotels = response.value.map(\n                            (item) => {\n                                return {\n                                    name: item.hotelName,\n                                    value: item.hotelId\n                                };\n                            }\n                        )\n                        this.setState({hotelList: hotels})\n                    }\n                }\n            ).catch(e => {\n                console.error(e);\n                ShowStatusError(\"hotel listesi getirilemedi.\");\n            })\n    }\n    onCreate =async (deviceContract) => {\n        let deviceModel = new DeviceModel();\n        deviceModel = {...deviceContract};\n\n        var response = await SaveDevice(deviceModel);\n        if(!response || !response.success){\n            ShowStatusError(response.getResultsStringFormat());\n            return;\n        }\n        if(response && response.success){\n            ShowStatusSuccess(\"kayıt başarılı\");\n            await this.getList();\n        }\n    }\n\n    onDelete =async (deviceContract) => {\n        if(!deviceContract || !deviceContract.brasscoDeviceId){\n            alert('device id bilgisi dolu olmalıdır!');\n            return;\n        }\n        var deviceModel = new DeviceModel();\n        deviceModel = {...deviceContract};\n\n        var response = await DeleteDevice(deviceModel);\n        if(!response || !response.success){\n            ShowStatusError(response.getResultsStringFormat());\n            return;\n        }\n        if(response && response.success){\n            ShowStatusSuccess(\"silindi.\");\n            await this.getList();\n        }\n    }\n\n    handleCloseDialog = () => {\n        this.setState({isOpenDialogForm: false});\n    };\n    handleOpenDialog = () => {\n        this.setState({isOpenDialogForm: true});\n    };\n\n    validateCreateModel = () => {\n        return this.state.isAddedDeviceValid;\n    }\n\n    setDevice = (device)=>{\n        this.setState({\n            device:device,\n            isAddedDeviceValid:true\n        });\n    }\n\n    render() {\n        return (\n            <LoadingOverlay\n            active={this.state.isLoading}\n            spinner\n            text={'loading...'}>\n                <Grid container direction=\"column\" spacing={3}>\n\n                    <Grid item>\n                        <Typography variant='h4'>\n                            Device\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Card elevation={1}>\n                            <DataTable\n                                columns={this.columns}\n                                data={this.state.deviceList}\n                                onSelectedItemChange={(\n                                    currentRowIndex,\n                                    allRowsIndexes,\n                                    rowsSelectedIndex\n                                ) => {\n                                    if(this.state.deviceList && this.state.deviceList.length > 0 && rowsSelectedIndex){\n                                        var selectedData = this.state.deviceList[rowsSelectedIndex];\n                                        // eslint-disable-next-line react/no-direct-mutation-state\n                                        this.state.selectedDevice = selectedData\n                                    }\n                                }\n                                }\n                            />\n                        </Card>\n                    </Grid>\n                   {this.state.isOpenDialogForm ? (\n                        <DialogForm\n                            count={this.state.renderCount}\n                            title={\"Create Device\"}\n                            content={(<DeviceAdd\n                                hotelList={this.state.hotelList}\n                                setDevice={this.setDevice}\n                                isUpdate={this.state.isOpenDialogForUpdate}\n                                deviceModel={this.state.isOpenDialogForUpdate ? this.state.selectedDevice : undefined} />)}\n                            handleClose={this.handleCloseDialog}\n                            actions={(\n                                <Button autoFocus\n                                        disabled={!this.state.isAddedDeviceValid}\n                                        onClick={()=>{\n                                    if(!this.validateCreateModel()){\n                                        return;\n                                    }\n                                    this.handleCloseDialog()\n                                    if(this.state.isOpenDialogForUpdate){\n                                        this.onUpdate(this.state.device)\n                                    }\n                                    else{\n                                        this.onCreate(this.state.device)\n                                    }\n                                }} color=\"primary\">\n                                    Kaydet\n                                </Button>\n                            )}\n                        />\n                    ) : (\n                        <p></p>\n                    )}\n                </Grid>\n            </LoadingOverlay>\n\n    );\n    }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeActiveResourceCode: bindActionCreators(\n                pageActions.changeActiveResourceCode,\n                dispatch\n            ),\n            executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeviceComponent);\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Avatar, Card, CardContent, CardHeader, Checkbox, FormControlLabel, Grid, TextField} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport {AccountCircleRounded} from '@material-ui/icons';\nimport { IsNullOrEmpty } from '../../Core/Helper';\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nclass UserAdd extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            renderCount:0,\n            isUpdate:this.props.isUpdate,\n            user: this.props.userModel ?? {},\n            isLoading:true,\n            validation:{\n                fullName:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n                email:{\n                    isValid:true,\n                    helperText:\"\"\n                },\n            }\n        };\n\n    }\n\n    validateAndSetUser = ()=>{\n    if(IsNullOrEmpty([this.state.user.fullName,this.state.user.email])){\n        return;\n    }\n\n    if(this.props.setUser) this.props.setUser(this.state.user)\n    }\n\n    render() {\n        return (\n            <Card>\n                <CardHeader\n                    avatar={\n                        <Avatar\n                            aria-label=\"recipe\"\n                            style={{backgroundColor: \"#28509C\"}}\n                        >\n                            <AccountCircleRounded/>\n                        </Avatar>\n                    }\n                    title={\"ARTES\"}\n                    subheader={\"Create new user\"}\n                />\n                <CardContent>\n                    <Grid container spacing={3} direction=\"column\" alignItems=\"stretch\">\n                        <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth={true}\n                                required\n                                error={!this.state.validation.fullName.isValid}\n                                helperText={this.state.validation.fullName.helperText}\n                                label=\"Ad Soyad\"\n                                variant=\"standard\"\n                                value={this.state.user.fullName}\n                                onChange={(e) => {\n                                    let val = this.state.user;\n                                    val.fullName = e.target.value\n                                    this.setState({user:{...val}});\n                                    this.validateAndSetUser();\n                                }}\n                                onBlur={()=>{\n                                        var validObj = {...this.state.validation};\n                                    if(IsNullOrEmpty(this.state.user.fullName) || this.state.user.fullName?.length < 3 ){\n                                        validObj.fullName.isValid = false;\n                                        validObj.fullName.helperText = \"Geçerli bir isim girmelisiniz.\";\n                                    }else{\n                                        validObj.fullName.isValid = true\n                                        validObj.fullName.helperText = \"\"\n                                    }\n                                        this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                            <Grid item md={this.dialogGridMdSize}>\n                            <TextField\n                                fullWidth\n                                required\n                                error={!this.state.validation.email.isValid}\n                                helperText={this.state.validation.email.helperText}\n                                label=\"Email\"\n                                variant=\"standard\"\n                                value={this.state.user.email}\n                                onChange={(e) => {\n                                    //this.state.hotel.hotelAdminMail = e.target.value;\n                                    let val = this.state.user;\n                                    val.email = e.target.value\n                                    this.setState({user:{...val}});\n                                    this.validateAndSetUser();\n                                }}\n                                onBlur={()=>{\n                                    const emailRex =\n                                        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n                                    var validObj = {...this.state.validation};\n                                    if (emailRex.test(this.state.user.email)) {\n                                        validObj.email.isValid = true;\n                                        validObj.email.helperText = \"\";\n                                    }else {\n                                        validObj.email.isValid = false;\n                                        validObj.email.helperText = \"Geçerli bir mail adresi girmelisiniz.\";\n                                    }\n                                    this.setState({validation:validObj})\n                                }}\n                            />\n                        </Grid>\n                        <Grid item md={this.dialogGridMdSize}>\n                        <FormControlLabel control={<Checkbox\n                            checked={this.state.user.status}\n                            onChange={(event,checked)=>{\n                                let user = this.state.user;\n                                if(user.status === checked) return;\n\n                                user.status = checked;\n                                this.setState({user:{...user}})\n                                this.validateAndSetUser();\n                            }}\n                            />} label=\"Aktif\" />\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        );\n    }\n}\n\nUserAdd.defaultProps = {\n    setUser:PropTypes.func.isRequired,\n    isUpdate:PropTypes.bool,\n    userModel: PropTypes.object\n};\n\nexport default connect(\n    mapStateToProps,\n)(UserAdd);","import React, { Component } from \"react\";\nimport User from \"../../Models/User\";\nimport { AddUser, GetUsers, UpdateUser } from \"../../Services/UserService\";\nimport {CommonTypes} from \"../../Types/Common\";\nimport * as pageActions from \"../../redux/actions/page-actions\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Card, Grid, Typography} from \"@material-ui/core\";\nimport DataTable from \"../ToolBox/DataTable\";\nimport DialogForm from \"../ToolBox/dialog-form\";\nimport { ShowStatusError, ShowStatusSuccess} from \"../../Core/Helper\";\nimport Button from \"@material-ui/core/Button\";\nimport LoadingOverlay from \"react-loading-overlay\"\nimport UserAdd from \"./User.modal\"\n\n\nclass UserScreen extends Component {\n\n    static displayName = UserScreen.name;\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isOpenDialogForm: false,\n            isOpenDialogForUpdate:false,\n            user: {},\n            userList:[],\n            isLoading:true,\n            selectedUser:{},\n            isAddedUserValid:false\n        };\n    }\n\n    columns = [\n        {\n            name:\"fullName\",\n            label:\"Name\",\n            options:{filter: true, sort: true}\n        },\n        {\n            name:\"email\",\n            label:\"email\",\n            options:{filter: true, sort: true}\n        },\n    ];\n\n    componentDidMount() {\n        if (this.props.actions.changeActiveResourceCode) {\n            this.props.actions.changeActiveResourceCode(\n                CommonTypes.Resources.user.resourceCode\n            );\n        }\n\n        if (this.props.actions.executeCommand) {\n            this.props.actions.executeCommand(this.onExecute);\n        }\n\n        this.onLoad();\n    }\n\n    onLoad = async ()=>{\n        await Promise.all([this.getList()])\n        this.setState({\n            isLoading:false\n        });\n    }\n\n    dialogContent = (<div></div>)\n    dialogGridMdSize = 7;\n\n    onExecute = async (key) => {\n        switch (key) {\n            ///create device\n            case CommonTypes.ActionKeys.CreateUser:\n                this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:false})\n                break;\n            \n            case CommonTypes.ActionKeys.UpdateUser:\n                if(!this.state.selectedUser.userId || \n                    this.state.selectedUser.userId < 1){\n                    ShowStatusError(\"işlem yapmak için kayıt seçmeniz gerekmektedir.\");\n                    return;\n                }\n                    this.setState({isOpenDialogForm: true,isOpenDialogForUpdate:true})\n                    break;    \n                    case CommonTypes.ActionKeys.DeleteUser:\n                        if(!this.state.selectedUser.userId || \n                            this.state.selectedUser.userId < 1){\n                            ShowStatusError(\"işlem yapmak için kayıt seçmeniz gerekmektedir.\");\n                            return;\n                        }\n                            this.setState({isLoading: true})\n                            this.onDelete(this.state.selectedUser)\n                            break;  \n            case CommonTypes.ActionKeys.GetList:\n                this.getList();\n                break;\n\n                default:\n                break;\n        }\n    };\n\n        async getList(){\n            this.setState({isLoading:true})\n            GetUsers()\n                .then(response => {\n                 if(!response.success){\n                     ShowStatusError(response.getResultsStringFormat());\n                     this.setState({isLoading:true})\n                 }\n                 \n                 if(response.value && response.value.length > 0){\n                     this.setState({userList:response.value,isLoading:false})\n                 }\n                })\n                .catch(\n                    e=>{\n                        ShowStatusError(e.message);\n                        this.setState({isLoading:false})\n                    }\n                )\n        }\n\n\n        onCreate =async (userContract) => {\n            let userModel = new User();\n            userModel = {...userContract};\n            userModel.password = \"1234\";\n            userModel.userType = 2;\n            userModel.hotelId = 1;\n    \n            var response = await AddUser(userModel);\n            if(!response || !response.success){\n                ShowStatusError(response.getResultsStringFormat());\n                return;\n            }\n            if(response && response.success){\n                ShowStatusSuccess(\"kayıt başarılı\");\n                await this.getList();\n            }\n        }\n        onUpdate =async (userContract) => {\n            let userModel = new User();\n            userModel = {...userContract};\n    \n            var response = await UpdateUser(userModel);\n            if(!response || !response.success){\n                ShowStatusError(response.getResultsStringFormat());\n                return;\n            }\n            if(response && response.success){\n                ShowStatusSuccess(\"güncelleme başarılı\");\n                await this.getList();\n            }\n        }\n\n        onDelete =async (userContract) => {\n            if(!userContract || !userContract.id){\n                alert('user id bilgisi dolu olmalıdır!');\n                return;\n            }\n            var userModel = new User();\n            userModel = {...userModel};\n    \n            var response = await User(userModel);\n            if(!response || !response.success){\n                ShowStatusError(response.getResultsStringFormat());\n                return;\n            }\n            if(response && response.success){\n                ShowStatusSuccess(\"silindi.\");\n                await this.getList();\n            }\n            this.setState({isLoading: false})\n        }\n\n\n        handleCloseDialog = () => {\n            this.setState({isOpenDialogForm: false});\n        };\n        handleOpenDialog = () => {\n            this.setState({isOpenDialogForm: true});\n        };\n    \n        validateCreateModel = () => {\n            return this.state.isAddedUserValid;\n        }\n    \n        setUser = (user)=>{\n            this.setState({\n                user,\n                isAddedUserValid:true\n            });\n        }\n\n        render() {\n            return (\n                <LoadingOverlay\n                active={this.state.isLoading}\n                spinner\n                text={'loading...'}>\n                    <Grid container direction=\"column\" spacing={3}>\n    \n                        <Grid item>\n                            <Typography variant='h4'>\n                                User\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Card elevation={1}>\n                                <DataTable\n                                    columns={this.columns}\n                                    data={this.state.userList}\n                                    onSelectedItemChange={(\n                                        currentRowIndex,\n                                        allRowsIndexes,\n                                        rowsSelectedIndex\n                                    ) => {\n                                        if(this.state.userList && this.state.userList.length > 0 && rowsSelectedIndex){\n                                            var selectedData = this.state.userList[rowsSelectedIndex];\n                                            // eslint-disable-next-line react/no-direct-mutation-state\n                                            this.state.selectedUser = selectedData\n                                        }\n                                    }\n                                    }\n                                />\n                            </Card>\n                        </Grid>\n                       {this.state.isOpenDialogForm ? (\n                            <DialogForm\n                                count={this.state.renderCount}\n                                title={\"Create User\"}\n                                content={(<UserAdd\n                                    setUser={this.setUser}\n                                    isUpdate={this.state.isOpenDialogForUpdate}\n                                    userModel={this.state.isOpenDialogForUpdate ? this.state.selectedUser : undefined} />)}\n                                handleClose={this.handleCloseDialog}\n                                actions={(\n                                    <Button autoFocus\n                                            disabled={!this.state.isAddedUserValid}\n                                            onClick={()=>{\n                                        if(!this.validateCreateModel()){\n                                            return;\n                                        }\n                                        this.handleCloseDialog()\n                                        if(this.state.isOpenDialogForUpdate){\n                                            this.onUpdate(this.state.user)\n                                        }\n                                        else{\n                                            this.onCreate(this.state.user)\n                                        }\n                                    }} color=\"primary\">\n                                        {\n                                            this.state.isOpenDialogForUpdate ? \"Güncelle\" : \"Kaydet\"\n                                        }\n                                    </Button>\n                                )}\n                            />\n                        ) : (\n                            <p></p>\n                        )}\n                    </Grid>\n                </LoadingOverlay>\n        );\n        }\n}\n\nconst mapStateToProps = (state) => ({});\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: {\n            changeActiveResourceCode: bindActionCreators(\n                pageActions.changeActiveResourceCode,\n                dispatch\n            ),\n            executeCommand: bindActionCreators(pageActions.executeCommand, dispatch),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserScreen);\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Layout from \"./components/Layout\";\nimport Home from \"./components/Home\";\nimport DeviceComponent from \"./components/Device\";\nimport UserScreen from \"./components/User/User.screen\";\n\nexport default class App extends Component {\n  static displayName = App.name;\n\n  render() {\n    return (\n      <Layout>\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/device\" component={DeviceComponent}/>\n          <Route path=\"/user\" component={UserScreen}/>\n        </Switch>\n      </Layout>\n    );\n  }\n}\n","export default class Parameter {\n    ParamType;\n    ParamCode;\n    ParamDescription;\n    ParamValue;\n    ParamValue2;\n    ParamValue3;\n    ParamValue4;\n    ParamValue5;\n}","import Parameter from \"../../Models/Parameter\";\n\nexport default {\n  registerUser: {\n    name: \"redux-test-user-name\",\n    isRegistered: false,\n  },\n  loginUser: {\n    userId: -1,\n    userName: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    token: \"\",\n    expiration: new Date(),\n  },\n  cityList: [\n    {\n      name: \"Seçiniz\",\n      cityId: -1,\n    },\n  ],\n  selectedCityId: -1,\n  countyList: [\n    {\n      name: \"Seçiniz\",\n      countyId: -1,\n    },\n  ],\n  parameterList: [initialParameter()],\n  jwtObject: {\n    token: \"\",\n    expiration: new Date(),\n    isSuccess: false,\n    isNewPassword: false,\n  },\n  messageObject: {\n    messageType: \"\",\n    message: \"\",\n  },\n  actionListInfo: {\n    actionKeyList: [],\n    resourceCode: \"\",\n  },\n  executedAction: {\n    onExecute: () => {\n      alert(\"executed redux function\");\n    },\n  },\n  backDropStatus: false,\n};\n\nfunction initialParameter() {\n  let initialParameter = new Parameter();\n  initialParameter.ParamCode = -1;\n  initialParameter.ParamType = \"no param\";\n  return initialParameter;\n}\n","import { combineReducers } from \"redux\";\nimport loginReducer from \"./login-reducer\";\nimport cityReducer from \"./city-county-reducer\";\nimport countyReducer from \"./county-reducer\";\nimport parameterReducer from \"./parameter-reducer\";\nimport registerReducer from \"./register-reducer\";\nimport changeLoginStatusReducer from \"./change-login-status-reducer\";\nimport showMessageReducer from \"./message-reducer\";\nimport changeSelectedCityReducer from \"./change-selected-city-reducer\";\nimport actionListReducer from \"./actionReducers/action-list-reducer\";\nimport actionExecuteReducer from \"./actionReducers/action-execute-reducer\";\nimport backdropStatusReducer from \"./actionReducers/change-backdrop-status-reducer\";\nimport changeLoginToNewPasswordReducer from \"./change-login-new-password-reducer\";\n\nconst rootReducer = combineReducers({\n  loginReducer,\n  cityReducer,\n  countyReducer,\n  parameterReducer,\n  registerReducer,\n  changeLoginStatusReducer,\n  showMessageReducer,\n  changeSelectedCityReducer,\n  actionListReducer,\n  actionExecuteReducer,\n  backdropStatusReducer,\n  changeLoginToNewPasswordReducer,\n});\n\nexport default rootReducer;\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function loginReducer(state = initialState.loginUser, action) {\n  switch (action.type) {\n    case actionTypes.LOGIN:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function cityReducer(state = initialState.cityList, action) {\n  switch (action.type) {\n    case actionTypes.GETCITYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function countyReducer(state = initialState.countyList, action) {\n  switch (action.type) {\n    case actionTypes.GETCOUNTYLIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function parameterReducer(\n  state = initialState.parameterList,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.GETPARAMETER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function registerReducer(state = initialState.registerUser, action) {\n  switch (action.type) {\n    case actionTypes.REGISTER:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginStatusReducer(\n  state = initialState.jwtObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_STATUS:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function showMessageReducer(\n  state = initialState.messageObject,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.SHOW_STATUS_MESSAGE:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeSelectedCityReducer(\n  state = initialState.selectedCityId,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_SELECTED_CITY_ID:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionListReducer(\n  state = initialState.actionListInfo,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_ACTION_LIST:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function actionExecuteReducer(\n  state = initialState.executedAction,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.EXECUTE_ACTION:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import * as actionTypes from \"../../actions/action-types\";\nimport initialState from \"../initial-state\";\n\nexport default function backdropStatusReducer(\n    state = initialState.actionListInfo,\n    action\n) {\n    switch (action.type) {\n        case actionTypes.BACKDROP_STATUS:\n            return action.payload;\n        default:\n            return state;\n    }\n}\n","import * as actionTypes from \"../actions/action-types\";\nimport initialState from \"./initial-state\";\n\nexport default function changeLoginToNewPasswordReducer(\n  state = initialState.loginUser,\n  action\n) {\n  switch (action.type) {\n    case actionTypes.CHANGE_LOGIN_NEW_PASSWORD:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport { Provider as AlertProvider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./redux/reducers/configure-store\";\nimport \"alertifyjs/build/css/alertify.css\";\nimport \"react-datasheet-grid/dist/index.css\";\nimport Alertify from \"alertifyjs\";\n\nAlertify.set(\"notifier\", \"position\", \"bottom-center\");\n//import registerServiceWorker from \"./registerServiceWorker\";\n\n//const baseUrl = document.getElementsByTagName(\"base\")[0].getAttribute(\"href\");\nconst rootElement = document.getElementById(\"root\");\n\n// optional cofiguration\nconst options = {\n  position: \"bottom center\",\n  timeout: 5000,\n  offset: \"30px\",\n  transition: \"scale\",\n};\n\nconst store = configureStore();\n\nReactDOM.render(\n  <BrowserRouter>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </AlertProvider>\n  </BrowserRouter>,\n  rootElement\n);\n\n//registerServiceWorker();\n","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./index\";\nimport thunk from \"redux-thunk\";\n\nexport default function configureReducer() {\n  return createStore(rootReducer, applyMiddleware(thunk));\n}\n"],"sourceRoot":""}